1
00:00:09,325 --> 00:00:16,867
今天，我想就在筆電和樹莓派上使用 Ubuntu 桌面版

2
00:00:16,886 --> 00:00:23,209
去探討如何實踐及管理

3
00:00:23,261 --> 00:00:26,845
我是做為日本樹莓派使用者社團代表的太田

4
00:00:27,145 --> 00:00:29,700
這是我的自我介紹

5
00:00:30,034 --> 00:00:36,534
我在2012年時，創辦了日本樹莓派使用者社團

6
00:00:36,534 --> 00:00:39,700
同時我也是樹莓派基金會的志工

7
00:00:39,800 --> 00:00:47,464
主要工作內容是協助基金會在日本進行商業活動

8
00:00:48,167 --> 00:00:54,700
最近更進一步對台灣及中國等地的行銷進行協助

9
00:00:57,200 --> 00:01:01,700
關於我的自我介紹

10
00:01:01,700 --> 00:01:09,367
官方網站，官方論壇的日語分類中

11
00:01:09,367 --> 00:01:12,034
也有刊登我的自我介紹

12
00:01:12,034 --> 00:01:17,034
可以從這官方網站進入到官方論壇

13
00:01:17,034 --> 00:01:21,700
在日語分類中看到更多資訊

14
00:01:21,700 --> 00:01:23,700
有興趣的話可以看一下

15
00:01:23,700 --> 00:01:27,359
接著，這是今天的議程

16
00:01:27,359 --> 00:01:34,034
你喜歡 Ubuntu 桌面版嗎？對你來說它是否有用呢？

17
00:01:36,345 --> 00:01:40,034
該保留搭配 Windows  的雙系統啟動機制嗎？

18
00:01:41,367 --> 00:01:43,700
對 EFI (可延伸韌體介面)和 SD 卡進行修改

19
00:01:44,367 --> 00:01:47,083
其他小技巧

20
00:01:47,083 --> 00:01:57,034
樹莓派夠用嗎？講一講關於在樹莓派上使用 Ubuntu 的事情

21
00:01:57,549 --> 00:01:58,367
那麼，最一開始

22
00:01:59,367 --> 00:02:02,471
你喜歡桌面版的 Ubuntu 嗎？

23
00:02:02,471 --> 00:02:04,872
為何我想談這個話題？

24
00:02:04,872 --> 00:02:14,034
這是我一個中國(編按：應該為台灣)的朋友在臉書貼的梗圖

25
00:02:14,816 --> 00:02:18,034
過去：「自由很重要」

26
00:02:18,762 --> 00:02:20,367
「不需要 MS Office」

27
00:02:20,700 --> 00:02:22,034
「開源軟體是最屌的」

28
00:02:22,367 --> 00:02:25,700
「所以我們應該使用 Debian、GNU/Linux」

29
00:02:26,034 --> 00:02:29,367
但是跟以前比起來，現在卻變成了：

30
00:02:29,367 --> 00:02:31,367
「macOS 是最棒的」

31
00:02:31,700 --> 00:02:35,034
「MacBook Pro 是最屌的」這個樣子了

32
00:02:35,367 --> 00:02:40,700
果然，不論我們如何去使用 Ubuntu、Linux

33
00:02:40,700 --> 00:02:43,034
我們有一個不能不去思考的問題

34
00:02:43,034 --> 00:02:45,034
要說是什麼問題的話，那就是：

35
00:02:46,034 --> 00:02:55,367
「使用 Ubuntu 桌面版，就像是在組裝樂高積木一樣」我是這麼想的

36
00:02:55,367 --> 00:02:59,700
也就是說，雖然就像是在使用 Windows 那樣

37
00:02:59,700 --> 00:03:04,999
架構自己用的環境，需要先安裝作業系統、之後必須安裝一堆程式、做一堆設定

38
00:03:04,999 --> 00:03:07,367
實際上有很多步驟要做

39
00:03:07,367 --> 00:03:13,700
但在此之上，這些步驟都是跟使用 Ubuntu 密不可分的

40
00:03:13,700 --> 00:03:15,034
也因此

41
00:03:16,034 --> 00:03:18,034
像是發生了意料之外的狀況

42
00:03:19,367 --> 00:03:22,700
發生了許許多多不得不忍耐的狀況

43
00:03:23,034 --> 00:03:24,700
經歷了許多的狀況

44
00:03:24,700 --> 00:03:32,700
說實在的，我認為其所需要的忍耐力就跟組裝樂高積木一樣

45
00:03:33,034 --> 00:03:36,700
實際上還算蠻有趣的

46
00:03:37,034 --> 00:03:44,367
這是第一個我自己以 GPD Pocket 2 (一款小筆電) 建構的 Linux 環境

47
00:03:44,367 --> 00:03:48,034
作業系統是安裝在 SD 卡的

48
00:03:49,034 --> 00:03:52,367
就在近期，我更換了環境

49
00:03:52,367 --> 00:03:57,034
這是我最近用 Ubuntu 桌面版弄的環境

50
00:03:57,034 --> 00:04:01,367
用的是 2021 版的 GPD Pocket 2 

51
00:04:01,700 --> 00:04:12,034
系統是直接裝進 GPD Pocket 2 的內建 SSD。這是展示畫面

52
00:04:15,034 --> 00:04:16,367
附帶一提

53
00:04:16,700 --> 00:04:22,034
一如既往的，GPD Pocket 背面溫度仍然很高

54
00:04:22,034 --> 00:04:28,700
不如說，Core M3 很熱

55
00:04:29,034 --> 00:04:32,700
現在先貼些散熱貼片來頂住

56
00:04:35,700 --> 00:04:39,700
但如果你能忍受這點

57
00:04:39,700 --> 00:04:44,034
具有極強便攜性的這台小筆電令人意外的很有用

58
00:04:44,614 --> 00:04:49,700
我可以在火車上、通勤時，打開來就能看看郵件上上網，

59
00:04:49,700 --> 00:04:53,034
不愧是把系統安裝在 SSD 中

60
00:04:53,034 --> 00:04:57,034
休眠/喚醒時間很快，就跟使用平板電腦一樣

61
00:04:57,034 --> 00:05:00,700
對我來說用起來非常方便

62
00:05:04,034 --> 00:05:08,700
接著，來談談「必須保留 Windows」這個話題

63
00:05:09,367 --> 00:05:14,700
我個人極力想保留 Windows 只為了一個原因

64
00:05:14,700 --> 00:05:21,700
那就是：想要用安全且輕鬆的方式更新 BIOS/UEFI

65
00:05:21,700 --> 00:05:29,367
我認為就是在 Windows 上滑鼠點兩下執行更新軟體最快的了

66
00:05:29,700 --> 00:05:31,034
其他方法還有

67
00:05:31,034 --> 00:05:38,367
BIOS/UEFI 有內建的更新介面，我們可以從那邊更新韌體

68
00:05:38,700 --> 00:05:45,367
另外就是從命令列指定檔案透過更新工具進行BIOS/UEFI更新

69
00:05:46,367 --> 00:05:51,700
再來就是，在 USB 隨身碟安裝小型OS，透過它進行BIOS/UEFI更新

70
00:05:51,700 --> 00:05:59,700
雖然有這些方法，可是從 Windows 進行更新還仍是最安全的

71
00:06:00,034 --> 00:06:09,367
因此老實說，對我而言這是保留 Windows 最大的因素

72
00:06:11,034 --> 00:06:14,034
但也不是只有這樣。實際上呢

73
00:06:14,367 --> 00:06:25,034
在實際使用上，像是 Zoom、Office、防毒軟體、BIOS 更新程式、聊天工具等

74
00:06:25,034 --> 00:06:31,034
顯然的這些程式在 Windows 上都能正常使用，但在 Linux 上還不能使用

75
00:06:31,367 --> 00:06:38,034
特別是使用 Zoom 時，能不能使用 AI 相機功能這點影響很大，所以還是只能 Windows 底下使用

76
00:06:39,034 --> 00:06:43,367
所以從這點來說 Windows 還是比較強大，我是如此認為的

77
00:06:43,367 --> 00:06:47,367
過去我以為這只是筆電維護上的問題

78
00:06:47,367 --> 00:06:56,367
結果現在我認為比較可能是因為從最開始筆電就是以在 Windows 上進行所有維護流程為前提進行設計的

79
00:06:57,034 --> 00:07:03,700
可是，要說沒有不方便的地方嗎？還是有的

80
00:07:03,700 --> 00:07:06,700
要說為什麼呢？因為從我們 Linux 使用者的角度來看

81
00:07:06,700 --> 00:07:14,034
首先，我們linux用戶無法避免SD卡的緩慢。因為我們不能使用內部 SSD 作為主儲存空間。

82
00:07:15,867 --> 00:07:22,742
而且，它很容易壞掉，我們每天都會看到許多壞的部分。

83
00:07:23,103 --> 00:07:27,053
我計劃使用 USB 記憶體，但是

84
00:07:27,309 --> 00:07:32,941
性能受 USB 接口限制，這是不可避免的。

85
00:07:33,709 --> 00:07:38,829
而且它受 USB 總容量的限制。

86
00:07:39,524 --> 00:07:46,326
USB 接口也用於網路線連接，它消耗頻寬並導致速度變慢。

87
00:07:48,045 --> 00:07:53,092
所以，當我們使用一些應用程式時，

88
00:07:53,494 --> 00:07:58,870
通過有限的硬碟頻寬，我們應該管理它。

89
00:07:59,528 --> 00:08:03,002
而且，老實說，內部硬碟真的很快。

90
00:08:04,429 --> 00:08:06,921
這是 benchmark 的測試結果，

91
00:08:07,281 --> 00:08:11,378
microSD 卡和內部磁盤的測試結果都有，

92
00:08:11,378 --> 00:08:17,558
它是 KDiskMark，類似 CrystalDiskMark 的測試軟體

93
00:08:17,558 --> 00:08:22,422
我們可以了解到隨機訪問非常慢。

94
00:08:24,836 --> 00:08:31,205
所以我們應該考慮如何緩解這種情況。

95
00:08:31,894 --> 00:08:37,270
首先，我會談談使用 microSD 的技巧，以及我使用 GPD Pocket 的經驗，

96
00:08:37,270 --> 00:08:42,063
我不能使用 suspend，因為 Resume 是耗時的，並且有穩定性問題。

97
00:08:42,063 --> 00:08:47,549
所以我認為冬眠會更好。

98
00:08:50,326 --> 00:08:56,470
我還使用了 memcached (memdisk) 作為快取。

99
00:08:56,470 --> 00:08:59,396
它可以使虛擬記憶體使用一些實際的記憶體

100
00:08:59,396 --> 00:09:07,259
我相信使用虛擬記憶體在遊戲、瀏覽器、MUA等應用是強制性的

101
00:09:07,259 --> 00:09:11,318
因為這些應用有大量的寫入，

102
00:09:11,757 --> 00:09:20,000
還有這些寫入的動作需要速度。

103
00:09:20,607 --> 00:09:23,679
所以我估計虛擬記憶體是強制性因素。

104
00:09:23,972 --> 00:09:28,324
這是使用 microSD 時的困難點。

105
00:09:29,311 --> 00:09:32,237
好的，讓我們開始深入探討這個問題。

106
00:09:32,237 --> 00:09:34,578
將介紹 UEFI 和 SD 卡應對方法，希望你看得開心。

107
00:09:43,391 --> 00:09:45,171
這些是 UEFI 的限制，並且...

108
00:09:45,183 --> 00:09:48,511
可能會令人驚訝，我們可以看到許多“鎖定”功能。

109
00:09:48,767 --> 00:09:52,871
“解鎖”小工具相當少見，占主導地位的例外情況是遊戲筆記本電腦。

110
00:09:53,156 --> 00:10:00,719
因為遊戲筆記本電腦需要最佳化，所以這些被稱為“解鎖”。

111
00:10:07,711 --> 00:10:12,319
返回“鎖定”情況，我們無法更改 VT-d 啟用和 CPU 頻率。

112
00:10:12,575 --> 00:10:16,311
有時 VT-d 不會顯示，還會被禁用。

113
00:10:24,095 --> 00:10:26,131
特別是，禁用 VT-d 對於虛擬化至關重要。

114
00:10:26,143 --> 00:10:28,191
所以我向供應商詢問了這些“鎖定”。

115
00:10:28,447 --> 00:10:29,971
供應商說：“這是為了安全”。

116
00:10:30,527 --> 00:10:36,159
“為防止事故發生，應“鎖定”和“不顯示”。

117
00:10:39,711 --> 00:10:43,295
在這些情況下，我試圖要求用於獲取特殊的“解鎖” UEFI 圖像。

118
00:10:43,551 --> 00:10:45,343
結果取決於供應商，一些供應商就有提供。

119
00:10:45,855 --> 00:10:47,903
另外，在很多情況下，日本供應商不會提供客製化圖像。

120
00:10:49,183 --> 00:10:53,791
而且中國供應商是可以協商的，雖然這只是個人的主觀想法‘。

121
00:10:57,119 --> 00:11:01,215
好的，我想談談 SD 卡技巧。

122
00:11:03,263 --> 00:11:05,671
你可能有安裝經驗，

123
00:11:07,227 --> 00:11:09,863
如果是這樣，安裝 SD 卡並不困難。

124
00:11:14,015 --> 00:11:19,647
困難的地方在於，我們應該考慮SD卡本身。

125
00:11:19,903 --> 00:11:21,739
例如，“哪間供應商會更好”

126
00:11:21,951 --> 00:11:27,327
寫入周期限制是每個供應商面臨到的問題。

127
00:11:29,631 --> 00:11:33,983
而且您可能知道，在許多情況下，我們無法“修剪”它們。

128
00:11:36,031 --> 00:11:39,359
結果我們沒有辦法去降低寫入周期。

129
00:11:44,735 --> 00:11:48,831
這意味著我們可以超越它們的寫入週期限制。

130
00:11:52,415 --> 00:11:55,219
我們也應該知道 SD 卡很容易導致數據損毀。

131
00:11:55,243 --> 00:11:58,347
偶爾，他們會不起作用

132
00:12:01,807 --> 00:12:05,355
所以我們需要確定它是由損壞的媒體引起的，還是只是數據損壞而已。

133
00:12:11,871 --> 00:12:15,651
而且我們應該決定哪個更好，更換 SD 卡，使用 fsck 指令。

134
00:12:21,343 --> 00:12:27,487
如果我們能做到，將 Windows 安裝到 SD 卡是最理想的，

135
00:12:27,743 --> 00:12:30,303
但是 Windows 應該安裝到內部的 PCIe 儲存空間

136
00:12:33,887 --> 00:12:37,983
由於開機相關的限制。

137
00:12:38,239 --> 00:12:41,131
所以我們無法將 Windows 安裝到 SD 卡。

138
00:12:42,847 --> 00:12:46,175
無論如何，SD卡沒有“修剪”

139
00:12:50,015 --> 00:12:53,343
所以我們應該考慮如何減少寫入的動作。

140
00:12:53,599 --> 00:12:56,927
我們還應該檢查數據是否有損壞。

141
00:13:02,815 --> 00:13:06,143
讓我們考慮如何管理當 SD 卡變成無功能狀態時。

142
00:13:06,911 --> 00:13:11,007
根據我的經驗，它會“變成只讀取”

143
00:13:11,519 --> 00:13:13,823
所以第一種方法是使用“touch”指令。

144
00:13:16,127 --> 00:13:18,943
“touch”可以檢測

145
00:13:19,455 --> 00:13:21,503
當您遇到“只讀取”問題時，

146
00:13:23,295 --> 00:13:27,391
刪除和替換為時尚早，下一步是......

147
00:13:27,647 --> 00:13:30,207
從 Live USB 開機，並使用 GParted 並執行 Chkdisk

148
00:13:34,559 --> 00:13:39,679
Chkdisk 可以復原這種問題

149
00:13:40,447 --> 00:13:45,683
在很多情況下，我們可以利用這種方法解決問題，因為這是特殊的手段。

150
00:13:47,103 --> 00:13:49,863
我試著解釋發生了什麼。這是我的猜測，一些 SD 卡有

151
00:13:49,919 --> 00:13:55,807
特定行為。例如 Transcend。經過一定次數的讀取後，

152
00:13:56,319 --> 00:13:58,867
它們將變為“只讀”，這種行為是種安全機制。

153
00:13:58,879 --> 00:14:02,691
Chkdsk 可以恢復它。之後，我們可以重複使用 SD 卡直到下一個限制來到。

154
00:14:03,487 --> 00:14:06,559
這些行為可能是“蓄意的”安全機制。

155
00:14:11,167 --> 00:14:15,775
為了控制這些行為，Chkdsk 是排解故障的第一步。

156
00:14:18,591 --> 00:14:23,967
如果我們不能用這種方法解決“只讀取”的問題，我們應該考慮下一步。

157
00:14:24,223 --> 00:14:28,695
下一步是，獲取新的 SD 卡，並使用“dd”指令開始完整複製。

158
00:14:35,743 --> 00:14:39,839
用“dd”複製很費時間，但該方法是最可靠的。

159
00:14:44,959 --> 00:14:51,103
此頁面有一些調整方法可以避免 SD 卡超載，

160
00:14:51,359 --> 00:14:55,967
創建 memdisk 工作目錄來作為 temp

161
00:14:56,223 --> 00:14:59,551
我還用 memdisk 創建了工作目錄，

162
00:15:04,415 --> 00:15:09,791
這是 Firefox 的調整，這將使用 ramdisk temp。

163
00:15:15,167 --> 00:15:19,007
有關已發行的 SD 卡資訊，以下是樹莓派中的著名文章。

164
00:15:25,151 --> 00:15:28,775
作者是 Peter Stevens，他提供樹莓派網頁託管服務"mythic beasts"

165
00:15:32,575 --> 00:15:35,899
他們知識淵博，了解 SD 卡的真實情況之的運作，

166
00:15:35,955 --> 00:15:41,799
一開始，他們嘗試使用 SD 卡來做託管服務，

167
00:15:42,559 --> 00:15:47,935
他們遇到了很多問題

168
00:15:48,447 --> 00:15:54,079
基於這些知識，我們應該了解 SD 卡是為何是脆弱的。

169
00:15:58,431 --> 00:16:00,523
好，接下來

170
00:16:03,295 --> 00:16:06,879
有關防毒軟體

171
00:16:07,135 --> 00:16:10,207
我測試了 Dr.Web 和 ESET

172
00:16:10,671 --> 00:16:16,815
即使我使用SSD，Dr.Web 在掃描電腦時仍然佔用 CPU 100% 的資源，

173
00:16:21,983 --> 00:16:26,811
GPD Pocket 沒有效能足夠的 CPU，所以我們應該考慮一下。

174
00:16:28,383 --> 00:16:34,527
為了避免這種問題，以閒置的時間做排程，

175
00:16:35,295 --> 00:16:37,487
我認為排程是可以管理的，但有些難實行。

176
00:16:37,599 --> 00:16:41,439
ESET 則不消耗 CPU 功率。

177
00:16:41,695 --> 00:16:45,535
每個防毒軟體，有的耗費電腦資源。

178
00:16:45,791 --> 00:16:47,839
所以我們通過測試來選擇防毒軟體

179
00:16:48,607 --> 00:16:51,423
為了檢測，我發現一些關鍵症狀

180
00:16:51,935 --> 00:16:56,543
自動更新時，我不能使用 apt，因為 Dr.Web 消耗了整個 CPU。

181
00:17:05,247 --> 00:17:07,295
我覺得它在我的使用過情景中是不適用的。

182
00:17:14,207 --> 00:17:16,511
接下來是 Grub 設置，

183
00:17:17,023 --> 00:17:23,167
在真實的桌面案例中，我們應該在 Windows 上使用雙系統啟動，

184
00:17:28,287 --> 00:17:34,431
如果我們清除 Windows 並且將 ubuntu 直接安裝到內部 SSD，

185
00:17:34,687 --> 00:17:37,379
它可能會導致問題。

186
00:17:39,551 --> 00:17:45,695
就我而言，我無法啟動系統本身，沒有開機畫面也沒有信號。

187
00:17:45,951 --> 00:17:50,303
為了解決這個問題，問 Ubuntu 和瀏覽其他文章可能對你有幫助。

188
00:18:01,567 --> 00:18:05,663
對於 Linux 和 Linux 雙系統啟動，這意味著你在 SD 卡中使用了 Linux，

189
00:18:05,919 --> 00:18:09,435
而且還計劃安裝另一個 Linux 在內部儲存裝置中。

190
00:18:11,807 --> 00:18:14,143
對於這種情況，你可能會遇到另一個問題。

191
00:18:16,415 --> 00:18:21,095
如果更新 kernel 相關的程式，它將會重新創建 Grub 環境。

192
00:18:22,303 --> 00:18:27,423
而且它會影響其他部分的 Linux

193
00:18:27,679 --> 00:18:33,823
因此，某一端需要另一端來啟動。

194
00:18:34,079 --> 00:18:40,223
為了修復，你可能需要 grub-install 或開機修復工具。

195
00:18:46,879 --> 00:18:49,183
在我的情況下，SD 卡需要重新創建 grub，

196
00:18:49,439 --> 00:18:55,583
而且 Grub 需要 SD 卡，所以如果我失去 SD 卡，

197
00:18:55,839 --> 00:18:58,175
我的 GPD Pocket 將無法啟動。

198
00:19:03,263 --> 00:19:09,151
為了修復它，Grub 菜單有一個方法，就是選擇內部的 SSD，

199
00:19:09,919 --> 00:19:14,527
開機後，我重新創建來自內部 SSD 的 Grub，問題就解決了。

200
00:19:15,551 --> 00:19:21,695
因此，為了避免開機出現問題，我們應該注意 Grub 相關的東西。

201
00:19:23,743 --> 00:19:30,331
這裡是相關文章，當我遇到問題時都會來查看，試圖自行解決問題。

202
00:19:32,095 --> 00:19:34,475
樹莓派是有用的，還是沒用的呢？

203
00:19:41,407 --> 00:19:46,799
這是 Ubuntu 的官方頁面，我們有很多樹莓派映像檔。

204
00:19:48,063 --> 00:19:54,207
我們有 32 位和 64 位的 ubuntu 21.04 映像檔

205
00:19:55,743 --> 00:20:00,783
這是官方的。而且，這些映像檔有經樹莓派基金會的工程師評估過

206
00:20:01,067 --> 00:20:03,203
這代表這些映像檔是可靠的。

207
00:20:06,239 --> 00:20:10,079
當然，這些映像檔在樹莓派中運作良好

208
00:20:13,407 --> 00:20:16,611
還可以於 64 位中，以假名(平假名、片假名等)的方式輸入文字

209
00:20:16,635 --> 00:20:18,459
這相當有用

210
00:20:18,783 --> 00:20:22,367
接下來，我想解說樹莓派的現有的款式，

211
00:20:22,623 --> 00:20:25,439
以及該款樹莓派的 ubuntu 的使用狀況

212
00:20:26,975 --> 00:20:30,503
樹莓派3是主流產品，當然能使用 Ubuntu。

213
00:20:31,627 --> 00:20:38,619
樹莓派 4 呢，我假設許多人想要在上面使用 Ubuntu 的 Container

214
00:20:39,263 --> 00:20:45,407
但是，樹莓派 4 記憶體為 8GB 的型號缺貨，要到今年十一月才會開始供貨。

215
00:20:47,455 --> 00:20:51,259
所以請先使用 4GB 的款式或其他的型號。

216
00:20:56,159 --> 00:20:59,999
而且，我想要用的是樹莓派 Compute Module 的系列產品，希望很多人能來挑戰使用它。

217
00:21:00,511 --> 00:21:05,459
Compute Module 可以通過 PCI Express 連接許多設備。

218
00:21:05,823 --> 00:21:11,967
還有 HDMI 的接口，可以將其連到大型螢幕上。

219
00:21:13,823 --> 00:21:16,895
因此，讓我們樂在其中並實現您的好主意。

220
00:21:17,151 --> 00:21:21,271
一些使用者正在嘗試創建“手持”PC。

221
00:21:21,339 --> 00:21:24,339
讓我們來嘗試看看

222
00:21:29,208 --> 00:21:33,208
我很抱歉 Compute Module 沒有 USB 3.0。

223
00:21:34,116 --> 00:21:37,988
而且，我們的社團成員 Akkie 測試了許多設備

224
00:21:38,144 --> 00:21:42,496
與 PCIe 的連接性能。

225
00:21:43,520 --> 00:21:47,104
值得注意的一點是，10GbE 和 NVMe 都運行良好。

226
00:21:47,752 --> 00:21:52,660
Compute Module 最重要的一點是，

227
00:21:54,016 --> 00:21:58,368
支持 RTC 功能。

228
00:21:58,880 --> 00:22:04,256
所以我們可以以嵌入式系統和筆記本電腦來構建它，

229
00:22:04,512 --> 00:22:08,104
並將其用作桌面。

230
00:22:12,192 --> 00:22:14,240
順帶一提，接下來將提到樹莓派400

231
00:22:14,752 --> 00:22:20,132
它具有更快的 CPU 和精心設計的散熱器。

232
00:22:21,408 --> 00:22:25,760
並且也是無風扇設計。

233
00:22:26,016 --> 00:22:32,160
它的靈感來自複古 PC、Commodore 64 和 BBC Micro

234
00:22:32,416 --> 00:22:35,920
是為了教育用途設計的。

235
00:22:37,536 --> 00:22:42,452
第二代的版本有在地化，可以適用於日本和印度。

236
00:22:43,936 --> 00:22:49,132
將支持其他國家/地區的在地化版本，但不支持 ETA。

237
00:22:49,388 --> 00:22:53,388
所以請查看樹莓派的官方頁面。

238
00:22:53,412 --> 00:22:56,812
官方推特將會提供相關訊息。

239
00:22:58,528 --> 00:23:01,308
好的，接下來是樹莓派的產品路線，

240
00:23:01,600 --> 00:23:07,744
創始人 Eben 在 Tom's Hardware 中洩露了一些未來的產品路線。

241
00:23:08,256 --> 00:23:10,048
對此，不幸的

242
00:23:11,072 --> 00:23:15,072
我們遇到了半導體短缺，

243
00:23:15,072 --> 00:23:19,072
現在不能規劃 4a 和 5 的系列產品。

244
00:23:22,616 --> 00:23:27,816
所以沒有人可以得到新產品，直到半導體短缺結束為止。

245
00:23:30,016 --> 00:23:33,600
如果你等不及了，我可以指出你需要去搜尋什麼。

246
00:23:33,856 --> 00:23:37,440
先回歸到樹莓派的產品哲學，也就是向下兼容，

247
00:23:37,696 --> 00:23:42,560
對於孩子們來說，能讓他們玩得開心，這些都是好的提示。

248
00:23:43,072 --> 00:23:49,316
還有一些採訪和 Github 的專案會洩露相關訊息 :)

249
00:23:49,472 --> 00:23:53,964
請查看這些地方以獲取最新產品的消息

250
00:23:55,360 --> 00:23:58,176
最後，這不是“另一件事”。

251
00:23:58,432 --> 00:24:02,016
我在許多場合說過，

252
00:24:02,272 --> 00:24:07,392
我們正在調整樹莓派

253
00:24:07,904 --> 00:24:09,184
什麼是適合需求的，

254
00:24:09,696 --> 00:24:14,048
我們有 MagPi，官方樹莓派雜誌，

255
00:24:14,560 --> 00:24:18,936
我們想以您的專案來作為 MagPi 的文章發表。

256
00:24:19,492 --> 00:24:22,072
世界上有很多候選人，

257
00:24:22,496 --> 00:24:26,080
當然，MagPi 是英國的雜誌

258
00:24:26,336 --> 00:24:30,336
因此占主導地位的是歐洲和非洲。

259
00:24:30,360 --> 00:24:32,360
現在，中國和印度的使用者有增加的趨勢

260
00:24:32,736 --> 00:24:36,576
但是，它在全球範圍內仍是有限的。

261
00:24:37,088 --> 00:24:38,256
因此，

262
00:24:38,368 --> 00:24:52,368
我們需要更多其他地方的投稿，比如韓國、台灣、香港、澳門、越南等地。

263
00:24:52,448 --> 00:24:58,448
我們希望能認識和介紹來自不同領域的良好專案。

264
00:25:02,432 --> 00:25:07,552
因此，我們感謝您嘗試提交專案文章或聯繫我們。

265
00:25:09,088 --> 00:25:10,112
例如，

266
00:25:10,624 --> 00:25:13,624
這是一個案例

267
00:25:14,464 --> 00:25:16,000
該文來自台灣，

268
00:25:16,512 --> 00:25:18,048
製作人是Penk Chen，

269
00:25:18,304 --> 00:25:22,304
他提供了"CutiePie".

270
00:25:22,400 --> 00:25:29,400
他為 Qt 工作，這款掌上電腦擁有豐富的UI。

271
00:25:34,176 --> 00:25:39,040
接著，他碰到了 MagPi 的編輯

272
00:25:39,296 --> 00:25:41,856
而且他有意願會見 Penk Chen，

273
00:25:42,112 --> 00:25:47,612
所以我安排編輯和Penk Chen的會面，結果在這。

274
00:25:51,328 --> 00:25:54,912
我接著介紹日本的專案，

275
00:25:55,424 --> 00:26:00,544
這是 Kikushima 先生的案例，是在 VInyard Kikushima 的葡萄酒釀造廠執行的。

276
00:26:01,056 --> 00:26:04,556
在這個酒廠，他使用樹莓派

277
00:26:04,652 --> 00:26:06,952
並從感測器中獲取許多數據。

278
00:26:07,044 --> 00:26:14,044
來自動化更改農藥噴灑的量

279
00:26:18,464 --> 00:26:20,000
這個案例需要的是什麼？

280
00:26:21,024 --> 00:26:25,120
太多的農藥會破壞葡萄酒的風味。

281
00:26:25,376 --> 00:26:28,192
所以他想降低農藥使用量。

282
00:26:29,728 --> 00:26:32,328
然而，零農藥噴灑是不實際的，

283
00:26:32,364 --> 00:26:37,788
挑戰是，通過傳感器獲得農藥噴灑“下限”。

284
00:26:39,200 --> 00:26:42,180
好的，最後是我想做的事。

285
00:26:42,272 --> 00:26:45,856
我的夢想是引進全亞洲的專案，

286
00:26:46,112 --> 00:26:48,380
不限於日本

287
00:26:53,496 --> 00:26:55,620
我想介紹各個領域的諸多專案，

288
00:26:58,176 --> 00:27:00,476
我正在與許多開源社區討論，

289
00:27:00,485 --> 00:27:03,485
並提供各種展示。

290
00:27:03,596 --> 00:27:07,844
因為我相信它不應該局限於日本

291
00:27:08,384 --> 00:27:09,884
我一直在這樣做，

292
00:27:10,944 --> 00:27:17,944
中國、台灣、韓國、越南、印度尼西亞、泰國......等，

293
00:27:18,112 --> 00:27:24,000
我想看到來自許多領域的許多專案。

294
00:27:24,512 --> 00:27:26,760
所以如果你想介紹你的專案。

295
00:27:26,816 --> 00:27:32,424
請隨時與我聯繫。

296
00:27:36,032 --> 00:27:37,312
作為結論，

297
00:27:40,384 --> 00:27:46,056
使用 Ubuntu 桌面很有趣，就像是疊樂高。

298
00:27:46,272 --> 00:27:51,272
我們永遠不應該忘記，

299
00:27:52,416 --> 00:27:54,852
你應該付出一些時間，這永遠不簡單。

300
00:27:54,976 --> 00:27:58,476
如果不可行，

301
00:27:58,548 --> 00:28:02,388
我們應該安裝到 SD 卡並使用子系統。

302
00:28:02,444 --> 00:28:05,180
並以 Windows 作為主要系統。

303
00:28:05,216 --> 00:28:08,032
我想重申這一點。

304
00:28:08,160 --> 00:28:14,504
我們應該審查內部 SSD 和 microSD 的利與弊。

305
00:28:14,560 --> 00:28:18,728
考慮權衡是必要的。

306
00:28:19,552 --> 00:28:27,152
此外，我們應該了解 SD 卡如何作為開機設備來運行的。

307
00:28:29,792 --> 00:28:38,556
而且，對於樹莓派而言，Ubuntu 是官方且是 64 位元的。

308
00:28:44,384 --> 00:28:47,200
樹莓派自己的 64 位作業系統還處於試用階段。

309
00:28:49,760 --> 00:28:53,600
而 64 位 suse 已是正式階段。

310
00:28:53,856 --> 00:29:00,856
據我所知，只有 suse 和 Ubuntu 是具有 64 位支持的官方正式版本。

311
00:29:02,560 --> 00:29:10,560
如果你有很棒的專案，當然，請聯繫我。

312
00:29:11,008 --> 00:29:20,008
郵件、推特、臉書、Linkedin都可以，歡迎使用任何方法聯繫我。

313
00:29:21,760 --> 00:29:26,060
請讓我知道任何有聯繫我的人。

314
00:29:26,880 --> 00:29:29,952
感謝您的觀看。

315
00:29:30,720 --> 00:29:32,512
好吧，大概 30 分鐘。

316
00:29:33,024 --> 00:29:38,024
祝你有美好的一天，再見！

