1
00:00:06,700 --> 00:00:13,110
大家好，我是Nur Hamim。我喜歡研究Linux、開源和雲端計算。

2
00:00:13,110 --> 00:00:21,077
我活躍於許多印尼的 Linux 社群，我是 BelajarLinux.id 的創始人，

3
00:00:21,077 --> 00:00:26,550
我在 PT. Biznet GIO Nusantara 擔任產品運營工程師。

4
00:00:26,550 --> 00:00:33,930
這次在 Ubuntu Conference Asia 2021 ，我將介紹使用multipass進行虛擬化 

5
00:00:33,930 --> 00:00:42,225
和在multipass的 Ubuntu 伺服器虛擬機上部署網路應用程式。

6
00:00:42,225 --> 00:00:46,152
先讓我們了解一下什麼是multipass？

7
00:00:46,152 --> 00:01:01,523
Multipass 是一種虛擬化，是 Canonical的產品之一。Multipass 用於創建虛擬機。multipass支援cloud-init，就像公有雲一樣。

8
00:01:01,825 --> 00:01:08,680
Multipass 可以在本地環境中運行，也可以在電腦或我們的筆記型電腦上運行。

9
00:01:08,680 --> 00:01:15,013
Multipass 本身是免費的，強烈推薦用於開發。

10
00:01:15,013 --> 00:01:22,920
為什麼要使用Multipass？Multipass 非常輕便，非常簡單易用。

11
00:01:23,185 --> 00:01:29,413
當我們創建一個虛擬機並且想要在multipass中刪除一個虛擬機時，這很容易。

12
00:01:29,639 --> 00:01:34,759
Multipass 還可用作虛擬機管理器。

13
00:01:36,000 --> 00:01:42,836
Multipass 可以安裝在多個作業系統上，例如 Linux、Windows 和 Mac OS。

14
00:01:42,836 --> 00:01:53,430
Multipass 是為想要使用基於 Ubuntu 虛擬機的開發者設計的。

15
00:01:53,430 --> 00:02:00,683
接下來我們將解釋 multipass 和 VirtualBox 之間的區別。

16
00:02:00,683 --> 00:02:08,100
我們都知道VirtualBox，它是一個可以創建虛擬機的虛擬管理器。

17
00:02:08,100 --> 00:02:15,390
在 virtualbox 中，我們提供了多種作業系統選擇模板。像是 Windows ，

18
00:02:15,390 --> 00:02:24,360
Linux等等。但是如果我們想在VirtualBox創建一個虛擬機

19
00:02:24,360 --> 00:02:32,944
我們必須有一個可以用來創建虛擬機的 ISO。

20
00:02:32,944 --> 00:02:41,050
相較之下，Multipass 會比較彈性些。首先，

21
00:02:41,050 --> 00:02:48,580
multipass 提供了幾個 Ubuntu 作業系統模板，從 Ubuntu 18,04 開始，

22
00:02:48,580 --> 00:02:57,820
20.04、21.04。我們也可以在multipass中創建作業系統或

23
00:02:57,820 --> 00:03:04,330
其他作業系統的虛擬機。在multipass中創建虛擬機的過程

24
00:03:04,330 --> 00:03:14,050
只需要執行一個命令。不像 VirtualBox，

25
00:03:14,050 --> 00:03:23,270
從上傳 ISO 開始，創建新的虛擬機，啟動虛擬機，需要多個步驟。

26
00:03:23,270 --> 00:03:30,410
這真的花時間。接下來我將解釋 multipass 和 Docker 之間的區別

27
00:03:30,410 --> 00:03:37,670
我們已經知道 docker 是應用程式級別的虛擬化。如果我們有一個

28
00:03:37,670 --> 00:03:45,620
容器化的應用程式，這些應用程式可以很容易地在Docker執行

29
00:03:45,620 --> 00:03:52,160
multipass 和 docker 之間的區別是非常基本的。Multipass 本身就是一個

30
00:03:52,160 --> 00:03:59,540
作業系統中的虛擬化。Docker 可以在multipass運作。所以，

31
00:03:59,540 --> 00:04:05,900
對於開發中的開發人員，非常適合使用multipass。因為在multipass

32
00:04:05,900 --> 00:04:12,320
非常高效和靈活。我們可以直接運行應用程式或服務。

33
00:04:12,320 --> 00:04:20,860
像是Docker。接下來我會解釋 multipass、VirtualBox 和 LXD 之間的區別。

34
00:04:20,860 --> 00:04:31,480
Multipass 是 Ubuntu 的實踐之一，專門用於開發，可以

35
00:04:31,480 --> 00:04:37,270
在多個作業系統上運行。例如 multipass 可以在 Linux、Windows、

36
00:04:37,270 --> 00:04:43,690
和 Mac OS執行。因此任何人或開發人員都可以在作業系統上使用Multipass。

37
00:04:43,690 --> 00:04:53,140
而且開發人員不需要特殊的虛擬化來執行Multipass

38
00:04:53,140 --> 00:05:04,120
如果在 Windows 上，我們可以使用 Hyper-V 或 VirtualBox。在 Mac OS 上，我們可以

39
00:05:04,120 --> 00:05:10,720
使用 hyperkit 或 VirtualBox，在 Linux 上我們可以使用 LXD。這裡有

40
00:05:10,720 --> 00:05:20,240
從Multipass的流程。底部是主機。此主機可以是 Linux、Mac OS 或

41
00:05:20,240 --> 00:05:27,860
Windows。所以可以使用我們現有的環境。接下來是userspace Multipass。

42
00:05:27,860 --> 00:05:39,620
這是系統或服務安裝在主機上的位置。在userspace Multipass上面

43
00:05:39,620 --> 00:05:45,380
可以創建各種虛擬機。虛擬機可以使用Ubuntu，

44
00:05:45,380 --> 00:05:52,169
可以用CentOS，可以用Rocky Linux等等。

45
00:05:52,169 --> 00:05:59,930
在虛擬機內部，我們可以安裝或部署像docker的服務，或者我們

46
00:05:59,930 --> 00:06:06,020
可以直接在虛擬機中部署一個應用程式。接下來我會解釋

47
00:06:06,020 --> 00:06:13,040
multipass的優缺點，就優點來說，Multipass十分簡易

48
00:06:13,040 --> 00:06:18,890
而且創建虛擬機的速度非常快。為什麼？因為Multipass

49
00:06:18,890 --> 00:06:23,880
已經提供了模板或預設的 Ubuntu 映像。如果我們想做一個

50
00:06:23,880 --> 00:06:29,730
ubuntu虛擬機，我們可以只執行一個命令行，接著multipass便會快速地

51
00:06:29,730 --> 00:06:34,680
創建一個虛擬機。如果我們要創建 Ubuntu 作業系統以外的虛擬機，

52
00:06:34,680 --> 00:06:40,590
我們也可以透過在每個作業系統的存儲庫中

53
00:06:40,590 --> 00:06:46,020
下載已經可用的磁碟映像(image cloud)。以CentOS為例，我們可以先下載

54
00:06:46,020 --> 00:06:52,170
CentOS 的磁碟映像(image cloud)。然後我們可以執行命令來創建一個

55
00:06:52,170 --> 00:06:58,650
使用 CentOS 映像的具有virtual pass的虛擬機。下一個multipass的優點是，

56
00:06:58,650 --> 00:07:04,890
它是最現代的管理虛擬機之一，非常適合正在進行開發的 

57
00:07:04,890 --> 00:07:11,640
開發人員，因為它非常簡單易用。十分推薦

58
00:07:11,640 --> 00:07:18,330
使用Multipass進行開發。所以如果我們想製作一個生產級別

59
00:07:20,230 --> 00:07:26,110
開發，我們可以使用virtual pass來執行應用程式或作業系統。

60
00:07:26,110 --> 00:07:32,290
那麼multipass的缺點是什麼呢？當我們創建了一個虛擬機之後

61
00:07:32,290 --> 00:07:38,461
我們無法調整之前自動設置的規格。

62
00:07:38,461 --> 00:07:43,316
那麼如何調整我們創建的虛擬機的大小？

63
00:07:43,316 --> 00:07:49,792
解決辦法是先停止虛擬機。然後我們手動調整。第二個缺點是，

64
00:07:49,792 --> 00:07:55,830
虛擬機中預設的Multipass只有一個可用介面。

65
00:07:55,830 --> 00:08:03,730
第三個缺點是，預設情況下Multipass僅提供少數映像。 Ubuntu 映像

66
00:08:03,730 --> 00:08:13,540
和已綁定的映像應用程式是其中之一。 k3s 映像或 nextcloud映像。

67
00:08:13,540 --> 00:08:21,500
在Multipass開發中經常使用它，也就是在Multipass中使用 kubernetes 叢集。

68
00:08:21,500 --> 00:08:29,150
Multipass 是 相對於docker 的另一選擇。通常被使用的是docker或容器。

69
00:08:29,150 --> 00:08:35,270
有了Multipass，

70
00:08:35,270 --> 00:08:43,010
我們可以在 multipass 上運行一個 docker，然後我們可以在Docker上面運行一個 Kubernetes 叢集

71
00:08:43,010 --> 00:08:49,130
或者我們也可以直接在虛擬機或Multipass上的虛擬機

72
00:08:49,130 --> 00:08:55,580
執行一個kubernetes叢集。為什麼？因為 multipass 已經支持metadata cloud-init

73
00:08:55,580 --> 00:09:02,720
在 cloud-init 中，我們可以自訂使用者需要的任何服務或

74
00:09:02,720 --> 00:09:09,710
Kubernetes 叢集。以下是一些kubernetes叢集部署的參考資料

75
00:09:09,710 --> 00:09:15,834
接下來我們將解釋cloud-init的基本概念。

76
00:09:15,834 --> 00:09:24,420
Cloud-init 是用於自定義實例雲(instance cloud)（如公有雲）的標準。

77
00:09:24,420 --> 00:09:30,781
許多公有雲使用 cloud-init 映像模板。例如openstack。

78
00:09:30,781 --> 00:09:37,940
OpenStack 也可以使用 cloud-init。在Multipass，我們也可以使用 cloud-init。

79
00:09:37,940 --> 00:09:44,100
因此，強烈推薦開發者使用 multipass 

80
00:09:44,100 --> 00:09:50,820
這裡是一個 cloud-init 設定的例子，

81
00:09:50,820 --> 00:10:00,450
這是SSH。SSH使用密鑰登錄虛擬機

82
00:10:00,450 --> 00:10:07,560
在這裡我們也可以確定封包(package)是否直接更新作業系統

83
00:10:07,560 --> 00:10:14,220
更新或升級？在這裡是True。這表示之後在創建虛擬機

84
00:10:14,220 --> 00:10:22,180
過程中，package已經自動更新了。這是package menu。

85
00:10:22,180 --> 00:10:28,990
我們可以決定要使用我們製作的作業系統或我們創建的虛擬機中

86
00:10:28,990 --> 00:10:36,790
的什麼package。這裡我們使用 git、vim、wget，我們甚至

87
00:10:36,790 --> 00:10:44,530
可以直接使用 docker package，這裡是 runcmd 命令行。啊，就是這個

88
00:10:44,530 --> 00:10:54,730
這會自動執行package。這個package會列出需要

89
00:10:54,730 --> 00:11:01,480
安裝什麼package。是否 runcmd 函數將要執行或

90
00:11:01,480 --> 00:11:06,820
正在已安裝的package上運行。那麼如何安裝multipass？

91
00:11:06,820 --> 00:11:12,550
我們知道 multipass 可以在許多作業系統上運行。從 Linux、Windows ，

92
00:11:12,550 --> 00:11:18,370
到 Mac OS。讓我們看看它有多容易。我們在Linux上安裝了一個Multipass

93
00:11:18,370 --> 00:11:25,010
在 Linux 作業系統上，要運行 multipass ，我們可以只執行一行

94
00:11:25,010 --> 00:11:31,190
命令。可以使用snap，使用命令“snap install multipass”。

95
00:11:31,190 --> 00:11:38,480
如果我們使用 amd64 以外的架構，我們也可以執行Multipass。

96
00:11:38,480 --> 00:11:45,890
因此，Multipass不需要特殊的虛擬化。所有的虛擬化

97
00:11:45,890 --> 00:11:53,060
都可以執行Multipass。那麼我們如何在Windows使用呢？

98
00:11:53,060 --> 00:11:57,440
Multipass 已經為 Windows 提供了一個包，

99
00:11:57,440 --> 00:12:05,540
我們可以下載並安裝，就像在 Windows 上安裝應用程式一樣。但是，需要注意的是

100
00:12:05,540 --> 00:12:11,630
Windows 有一些支援Multipass的版本要求。包含 Windows 10 Pro、

101
00:12:11,630 --> 00:12:18,740
企業版和教育版。或者我們可以將 Windows 與

102
00:12:18,740 --> 00:12:25,260
VirtualBox 結合來運行Multipass。如果是在 Mac OS 上，

103
00:12:25,260 --> 00:12:31,980
和在Windows上一樣。Multipass 已經提供了一個可以安裝在 Mac OS 上的包。安裝multipass

104
00:12:31,980 --> 00:12:38,610
在Mac OS 和我們在 Mac OS 上安裝應用程式相同。如果我們想要

105
00:12:38,610 --> 00:12:44,760
一起使用 multipass 和 VirtualBox 而且用 VirtualBox 作為

106
00:12:45,480 --> 00:12:51,630
multipass虛擬機的管理器，我們可以設定一個驅動程式

107
00:12:52,792 --> 00:12:59,020
預設為 VirtualBox。但是如果我們不需要在 Mac OS 上使用 VirtualBox，

108
00:12:59,020 --> 00:13:04,060
我們就不需要設定驅動程式。因為每次我們安裝一個

109
00:13:04,060 --> 00:13:16,930
multipass，將自動安裝 multipass 驅動程式。然後就可以直接使用它。這裡有一些 multipass 的命令行。有很多

110
00:13:16,930 --> 00:13:24,710
我們可以在Multipass使用的基本命令。從“multipass -h”查看顯示幫助

111
00:13:24,710 --> 00:13:32,968
像這樣或--help。然後有一些我們可以使用的命令。從刪除開始，

112
00:13:32,968 --> 00:13:39,530
它的作用是刪除一個實例 (instance)，“exec” 用來運行或執行

113
00:13:39,530 --> 00:13:45,560
實例。在間接或不需要登入到實例的情況下

114
00:13:45,560 --> 00:13:54,890
可以使用 "exec" 。還有 “find” 來搜索multipass映像。“get”用來

115
00:13:54,890 --> 00:14:03,190
獲取實例中的現有配置。也有“help”指令來協助你。“info”用來

116
00:14:03,190 --> 00:14:12,010
查看我們製作的現有實例的詳細資料。也有“recover”，也有“plurge”，還有

117
00:14:12,010 --> 00:14:17,500
“restart”和其他基本命令。我會在下一投影片

118
00:14:17,500 --> 00:14:23,710
展示這些基本命令。在這張投影片我會解釋如何使用

119
00:14:23,710 --> 00:14:30,580
Multipass。正如我們之前已經知道的， multipass 有如此多

120
00:14:30,580 --> 00:14:38,470
容易執行的命令行。第一個從 “find” 開始。“multipass find”。這表示我們正在尋找

121
00:14:39,220 --> 00:14:46,400
在Multipass裡的映象。那麼，如果我們要在Multipass

122
00:14:46,400 --> 00:14:54,620
創建一個虛擬機呢？我們可以使用launch，“multipass launch”。在 “launch” ，

123
00:14:56,120 --> 00:15:04,430
我們可以指定一個參數。從CPU、記憶體、磁碟，甚至我們可以指定網絡——

124
00:15:05,000 --> 00:15:11,630
我們將在Multipass中使用什麼網絡。舉例來說，這裡我提供四個

125
00:15:11,630 --> 00:15:17,870
例子。第一個例子是 "multipass launch 20.04"。這意味著我們將創建一個

126
00:15:17,870 --> 00:15:26,770
裝有 Ubuntu 20.04 作業系，名稱為 instance-demo 的虛擬機。

127
00:15:26,770 --> 00:15:34,780
"--cpu" 表示著我們聲明了 2GB Multipass將使用 CPU。 “--memory”，

128
00:15:34,780 --> 00:15:41,410
這裡使用 2GB 的記憶體和 5GB 的磁碟。啊，實際上，我們在這裡

129
00:15:41,410 --> 00:15:47,750
可以自定義我們需要的實例或虛擬機的規格。

130
00:15:47,750 --> 00:15:55,220
第二個例子我們使用 cloud-init 或者已經自定義的映像創建一個實例。

131
00:15:55,220 --> 00:16:01,400
第三個例子是創建一個Ubuntu映像的虛擬機

132
00:16:01,400 --> 00:16:06,650
我們知道，multipass 只提供了 Ubuntu 映像

133
00:16:06,650 --> 00:16:12,350
這是解決方案。如果你想運行一個Ubuntu 以外的作業系統

134
00:16:12,350 --> 00:16:23,750
的虛擬機。舉例來說，這裡我們使用 CentOS 7 映像。要創建

135
00:16:23,750 --> 00:16:29,090
使用 CentOS 7 的虛擬機很容易。“multipass launch”，

136
00:16:29,090 --> 00:16:35,480
首先指向映像在的那個目錄，然後 "--name CentOS 7"。啊，這裡

137
00:16:35,480 --> 00:16:42,680
我們還可以定制我們需要的規格。multipass非常受歡迎和

138
00:16:43,590 --> 00:16:52,530
非常好的特色是，我們還可以創建一個虛擬機 --cloud-init http。

139
00:16:52,530 --> 00:16:59,670
因此，如果我們在安裝或創建時不需要下載映像。

140
00:16:59,670 --> 00:17:09,030
我們只需要來自現有存儲庫的連結。我們可以從可用的映像儲存庫連結

141
00:17:09,030 --> 00:17:15,810
直接啟動或創建虛擬機。

142
00:17:15,810 --> 00:17:21,900
所以我們不需要重新下載。但是用這種方法，我們必須

143
00:17:21,900 --> 00:17:28,350
確保網路連接。為什麼？因為我們直接從中心或存儲庫下載

144
00:17:28,350 --> 00:17:38,690
映像並直接安裝它，就像這樣。接下來是 "info"。在這些資料中，我們可以

145
00:17:38,690 --> 00:17:46,010
看到詳細的規格和什麼東西在實例中。例如在這裡， 

146
00:17:46,010 --> 00:17:52,550
"multipass --info instance-demo"。我們可以看到之前創建的名字是"instance-demo"虛擬化

147
00:17:52,550 --> 00:17:59,630
的詳細資訊。此外，我們還可以自定義這些資訊的格式。例如在這裡

148
00:17:59,630 --> 00:18:08,445
虛擬機資訊的格式為 YAML。所以我們只需添加“--format yaml”格式。

149
00:18:08,445 --> 00:18:17,120
然後是 “list” 命令。“multipass ls” ，也就是 "list" ，

150
00:18:17,120 --> 00:18:26,240
用來查看我們在Multipass中創建的所有虛擬機。除此之外“ls”也幾乎

151
00:18:26,240 --> 00:18:33,740
和 "info"一樣。在 “ls” 中，我們能夠以格式的形式看到

152
00:18:33,740 --> 00:18:42,143
我們創建的虛擬機的資料。例如，這裡的格式是 YAML 或 JSON。接下來是 "start"

153
00:18:42,143 --> 00:18:48,860
“stop”, “delete”命令行。如果是 “start”，就是運行虛擬機。如果“stop”

154
00:18:48,860 --> 00:18:55,190
它的功能是停止虛擬機。如果 “delete” 就是刪除虛擬機。

155
00:18:56,200 --> 00:19:04,450
接下來，這裡是非常重要的功能，非常適合

156
00:19:04,450 --> 00:19:11,770
開發者。這裡有一個 “recover”。當我們在虛擬機上不小心刪除虛擬機時，那麼

157
00:19:11,770 --> 00:19:18,280
我們之前創建並刪除的虛擬機的狀態，並沒有被自動刪除

158
00:19:18,280 --> 00:19:26,185
狀態只是“deleted”，不是永久刪除。所以在 "deleted"的狀態下，

159
00:19:26,185 --> 00:19:33,370
我們可以恢復那些實例。但如果真的想要自動永久刪除

160
00:19:33,370 --> 00:19:38,770
實例的話，我們可以使用 "multipass purge”。

161
00:19:39,610 --> 00:19:46,240
接下來有兩個選項可以訪問實例或multipass虛擬機。

162
00:19:46,240 --> 00:19:53,530
第一種使用shell方法。第二個使用exec方法。如果我們使用

163
00:19:53,530 --> 00:19:59,050
exec 方法，那麼我們就不需要登入我們創建的虛擬機的shell。

164
00:19:59,050 --> 00:20:07,150
我們只需要執行 "multipass exec"、實例的名稱，還有我們想要得到的

165
00:20:07,150 --> 00:20:13,139
要求或資訊。在這裡的例子，“--lsb_release -a | grep ^Codename”

166
00:20:13,139 --> 00:20:24,040
這表示我們想要獲取有關我們在虛擬機中使用的代號或作業系統版本的資訊

167
00:20:24,040 --> 00:20:29,290
不需要登入shell或虛擬機。另一方面，"shell"

168
00:20:29,290 --> 00:20:37,510
我們可以用它來shell，也可以直接登入虛擬機。

169
00:20:38,890 --> 00:20:47,870
這就是 shell 和 exec 之間的區別。接著最好的功能是 "get" 和 ”set”。

170
00:20:48,780 --> 00:20:58,260
在"get"預設情況下，multipass 已經自動執行。啊，也許我們

171
00:20:58,260 --> 00:21:04,260
還沒有解釋 multipass 其實有一個圖形使用者界面。所以不僅

172
00:21:05,700 --> 00:21:11,670
命令行界面，Multipass 還提供圖形用戶界面。如果我們在本地開發

173
00:21:11,670 --> 00:21:18,150
或本地環境中執行Multipass，圖形使用者介面會如何？

174
00:21:18,150 --> 00:21:25,530
例如在筆記本電腦上，圖形使用者界面會自動設定為自動啟動。

175
00:21:26,240 --> 00:21:32,870
透過這個"get"，我們可以了解如何在Multipass中配置自動啟動。

176
00:21:32,870 --> 00:21:39,005
然後是 "set"命令。它的功能與get相反。如果是

177
00:21:39,005 --> 00:21:43,490
get，它獲取資訊。如果是"set"，則是設定。

178
00:21:45,010 --> 00:21:53,560
在這個範例中，設置 client.gui.autostart=false。值為 [false]。這表示我們設置

179
00:21:53,560 --> 00:22:01,720
Multipass的圖形使用者界面為[false]。當我們設置 [false] 時，

180
00:22:01,720 --> 00:22:08,050
這表示該圖形使用者界面將不再自動運行。接下來我們討論

181
00:22:08,050 --> 00:22:16,720
關於Multipass的現有網路。Linux 中的預設設置是只有一個 Multipass

182
00:22:16,720 --> 00:22:24,620
接口。那麼當我們在Multipass虛擬機中需要兩個接口時呢？

183
00:22:24,620 --> 00:22:33,290
解決的辦法是我們可以在驅動橋接所在的地方

184
00:22:33,290 --> 00:22:42,100
添加LXD的驅動。第一個命令我們先安裝LXD。第二個命令我們藉由 “lxd init”

185
00:22:42,100 --> 00:22:51,410
配置 LXD。然後我們將本地驅動程式設置為 LXD。預設情況下

186
00:22:51,410 --> 00:22:59,060
在其他作業系統也是如此。例如，在 Mac OS 中，預設情況下我們在Multipass的驅動程式

187
00:22:59,060 --> 00:23:05,420
是它自己的Multipass。但是當我們要使用附加的驅動程式時

188
00:23:05,420 --> 00:23:12,380
我們必須將Multipasss設置為附加驅動程式。就像這邊的例子這樣

189
00:23:12,380 --> 00:23:19,130
什麼是附加驅動程式？附加驅動程式 LXD，就像這個。啊，在我們在 LXD 中設置了附加驅動程式之後。

190
00:23:19,130 --> 00:23:27,050
接下來，我們使用之前的指令，確保在Multipass的本地驅動程序已

191
00:23:27,050 --> 00:23:34,130
使用 LXD 。啊，在我們確定我們使用的是LXD的驅動之後，

192
00:23:34,710 --> 00:23:42,810
我們在Multipass和 LXD 之間進行連接。啊，圖片解釋了multipass

193
00:23:42,810 --> 00:23:51,210
網路。這是 ens3 以太網路，以太網路設備。然後是 lxdbr0 Bridge ，網橋。

194
00:23:51,210 --> 00:24:00,840
然後mpbr0。這意味著這個 ens3 是我們的虛擬機器監視器(hypervisor)或主機的接口

195
00:24:00,840 --> 00:24:09,750
假設我們使用公有hypervisor cloud。那麼這是公有雲的接口

196
00:24:09,750 --> 00:24:15,210
如果我們像在筆記本電腦上一樣使用本地環境。那麼ens3是

197
00:24:15,210 --> 00:24:24,240
我們筆記本電腦上的預設界面。接下來是 lxdbr0。這是一個我們剛製作的

198
00:24:24,240 --> 00:24:30,840
額外的界面。預設情況下，驅動程序或Multipass接口的名稱為 mpbr0。

199
00:24:31,543 --> 00:24:44,500
mp 代表multipass。所有網路 lxd 和這個 mpbr 是來自 ens3 的橋樑。

200
00:24:44,500 --> 00:24:50,980
如何創建具有附加網路的虛擬機呢？最後我們可以聲明

201
00:24:50,980 --> 00:24:57,880
一個選項。即 "--network"， 調整為我們創建的接口的名稱。這

202
00:24:57,880 --> 00:25:07,570
接口是lxdbr0。當創建實例時，確保有使用

203
00:25:07,570 --> 00:25:17,534
"multipass ls"，然後在 IPv4 部分，你會看到兩個不同的 IP 已附加到虛擬機。

204
00:25:17,534 --> 00:25:27,960
頂部的第一個是驅動程序 LXD 的 IP。第二個 IP是Multipass的。接下來

205
00:25:27,960 --> 00:25:35,460
我會解釋Multipass中的現有整合。Multipass 非常靈活。

206
00:25:35,460 --> 00:25:43,125
我們可以將 multipass 整合到各種虛擬機管理器中。例如

207
00:25:43,125 --> 00:25:48,690
我們可以將 virtual pass 整合到 virt-manager 或 VirtualBox 本身。

208
00:25:49,870 --> 00:25:56,350
因此，multipass 非常適合我們這些想要建立環境來開發的人

209
00:25:56,350 --> 00:26:02,410
因為有了我們的 multipass 可以在各種虛擬管理器

210
00:26:02,410 --> 00:26:08,721
進行開發。所以當我們真的需要一個虛擬管理器時

211
00:26:08,721 --> 00:26:14,380
我們可以使用 virt-manager。但是後端我們可以使用multipass。

212
00:26:14,380 --> 00:26:18,460
我們也可以使用 VirtualBox，但我們也使用 multipass。

213
00:26:19,260 --> 00:26:24,090
在此會議中，我不會展示如何整合。但在這裡我們有

214
00:26:24,090 --> 00:26:31,410
提供可用於Multipass整合的參考。好的，這次我

215
00:26:31,410 --> 00:26:38,610
將展示如何使用Multipass以及如何創建一個

216
00:26:38,610 --> 00:26:44,700
multipass 中的虛擬機以及如何在Multipass虛擬機中

217
00:26:44,700 --> 00:26:51,630
部署網路應用程式。首先，確保你已安裝Multipass。

218
00:26:52,510 --> 00:26:59,740
這裡我使用Multipass版本 1.8.0。可以在終端機中查看

219
00:26:59,740 --> 00:27:03,760
multipass 版本，也就是使用命令“multipass --version”。

220
00:27:05,210 --> 00:27:12,170
接下來查看Multipoass中可以使用的任何映像，

221
00:27:12,170 --> 00:27:20,720
使用命令“multipoass find”。預設情況下 multipass 提供映像。現有映像

222
00:27:20,720 --> 00:27:33,350
是 ubuntu 。從 Ubuntu 18.04、Ubuntu 20.04 到 21.04 。除了Multipass作業系統映像

223
00:27:33,350 --> 00:27:41,330
還提供已經存在的模板應用程式。這裡有很多選擇。從nextcloud，

224
00:27:41,330 --> 00:27:51,020
openhab、plexmediaserver 到 minikube。如果我們想使用 

225
00:27:51,020 --> 00:27:56,360
我們也可以使用 kubernetes 叢集並使用 minikube 進行本地開發。

226
00:27:58,800 --> 00:28:03,870
然後，如果我們想查看現有虛擬機器。我們可以

227
00:28:03,870 --> 00:28:13,351
使用“multipass ls”命令。這裡有可用的 CentOS 7 實例或虛擬機。

228
00:28:13,351 --> 00:28:20,940
使用 CentOS 7 的映像或實例和Multipass預設的Ubuntu之間的區別

229
00:28:20,940 --> 00:28:28,950
在於Image欄位。這裡不會詳細顯示資訊

230
00:28:28,950 --> 00:28:37,740
因為映像 CentOS 7 所使用的作業系統或版本或映像不在預設的 multipass 中。

231
00:28:40,070 --> 00:28:47,680
那麼如何在multipass中創建虛擬機呢？要創建虛擬機，

232
00:28:47,680 --> 00:28:55,550
使用 "multipass launch” 命令。然後這裡我們可以調整作業系統版本

233
00:28:55,550 --> 00:29:03,770
作為範例，這裡我使用的是 Ubuntu 20.04 作業系統。

234
00:29:06,060 --> 00:29:13,380
然後是 "--name" 選項。"--name" 就像之前解釋的那樣，即

235
00:29:13,380 --> 00:29:22,350
虛擬機的名稱。例如，名稱 instance-demo。除此之外，我們還可以

236
00:29:22,350 --> 00:29:32,820
調整我們可以使用的 CPU，例如這裡的 CPU 是雙核的。那麼記憶體是2GB

237
00:29:35,360 --> 00:29:39,740
將使用的磁碟為 5GB。

238
00:29:39,740 --> 00:29:45,800
透過這個命令行，我們已經能夠創建一個Multipass。

239
00:29:47,740 --> 00:29:55,400
這是創建虛擬機的過程。正如我們一起看到的，在終端機這裡

240
00:29:55,400 --> 00:30:01,430
是開始的過程。可以說從創建配置開始到啟動一個實例，

241
00:30:01,430 --> 00:30:06,590
步驟非常快。所以我們不需要另外手動來進行安裝。

242
00:30:06,590 --> 00:30:12,800
我們只需要使用一個命令行，我們就已經可以創建一個虛擬機了。

243
00:30:15,690 --> 00:30:21,690
等待實例初始化... 

244
00:30:23,130 --> 00:30:31,350
這裡實例已成功創建，如果...讓我們看看使用命令“multipass ls”，

245
00:30:32,170 --> 00:30:34,660
這裡instance-demo處於活動狀態。

246
00:30:36,800 --> 00:30:45,110
當我們想要登入到我們製作的虛擬機時呢？這裡以"instance-demo"為例

247
00:30:45,110 --> 00:30:54,020
要登入，你可以使用“multipass shell”加上實例名稱。

248
00:30:55,790 --> 00:31:00,950
這裡我們已經登入了instance-demo虛擬機的shell。

249
00:31:02,020 --> 00:31:10,280
確保我們已成功從虛擬機內 ping 。

250
00:31:10,280 --> 00:31:17,180
啊，現在實例已經成功連接到網路了，我們已經可以快速且簡易地

251
00:31:17,180 --> 00:31:24,110
使用虛擬機了。那麼，當我們想要使用 cloud-init 自定義映像

252
00:31:24,110 --> 00:31:31,490
創建虛擬機時呢？這裡我提供了

253
00:31:33,520 --> 00:31:38,240
可見的 cloud-init 模板。

254
00:31:38,240 --> 00:31:48,660
這裡是SSH授權，我們這裡可以輸入SSH公鑰

255
00:31:48,660 --> 00:31:54,373
然後這裡是 package-update 參數

256
00:31:54,373 --> 00:32:00,840
值為 [true]。這意味著在安裝和製作虛擬機包時

257
00:32:00,840 --> 00:32:09,300
自動更新。並且 apt-upgrade 為true，這表示如果作業系統是 Ubuntu，

258
00:32:09,300 --> 00:32:15,840
這將自動升級封包。在這裡我們還可以自定義什麼封包

259
00:32:15,840 --> 00:32:24,360
是我們將要安裝的。這裡的例子是 git、vim、curl、python3、htop、unzip、webserver、

260
00:32:24,360 --> 00:32:32,610
apache。其實我們也可以直接安裝自動打包docker。這裡還有一個選項，

261
00:32:34,920 --> 00:32:39,600
runcmd。它的功能是運行上面已經安裝的封包。

262
00:32:40,800 --> 00:32:44,850
那麼使用cloud-init創建虛擬機的命令如何使用？

263
00:32:46,280 --> 00:32:54,590
這很簡單。我們只需要添加 --cloud-init 選項。然後

264
00:32:54,590 --> 00:33:01,070
加上我們之前製作的 cloud-init 的名稱。啊，因為

265
00:33:01,070 --> 00:33:06,950
instance-demo 已創建，我將添加-1 表示demo-1。

266
00:33:09,090 --> 00:33:14,820
這個已經配置好了實例。然後是使用cloud-init啟動實例的過程

267
00:33:14,820 --> 00:33:21,590
這次它已經在啟動虛擬機的過程中了。

268
00:33:23,550 --> 00:33:29,820
使用 cloud-init 和不是預設可用的映像的

269
00:33:29,820 --> 00:33:39,030
自定義的封包，該過程依照

270
00:33:39,030 --> 00:33:44,940
我們自定義了多少個包，或者我們之前在 cloud-init 中定義了哪些包。

271
00:33:46,190 --> 00:33:54,140
我們定制的封包越多，啟動過程也就越長。

272
00:33:54,140 --> 00:34:02,480
因此，請確保在Multipass創建虛擬環境時的網路連接穩定

273
00:34:02,480 --> 00:34:10,770
啊，目前已經創建 cloud-init 的實例了

274
00:34:10,770 --> 00:34:17,700
讓我們看看區別。以下是差異。在配置或模板上

275
00:34:17,700 --> 00:34:24,960
之前的cloud-init，我們定義了docker包，這裡docker已經安裝好了

276
00:34:24,960 --> 00:34:31,230
並且 docker 有自己的 IP 地址。然後在我們之前的 cloud-init 配置上

277
00:34:31,230 --> 00:34:37,170
我們還導入了 ssh-key。所以要登入到使用 cloud-init的 demo-instance-1，

278
00:34:37,170 --> 00:34:43,470
有兩個選項。我們可以使用 SSH 中的密鑰，

279
00:34:43,470 --> 00:34:50,220
或使用shell。比如我們用key來對應OS的名字，

280
00:34:51,660 --> 00:34:56,670
根據作業系統的名稱登入。比如這裡要登入的作業系統是Ubuntu，

281
00:34:56,670 --> 00:35:04,460
好的，到這裡我們已經成功透過 SSH 登入到 demo-instance-1。

282
00:35:04,460 --> 00:35:11,960
如果我們想用shell登錄demo-instance-1呢？也可以做到。目前我們已

283
00:35:11,960 --> 00:35:18,770
成功登入到 demo-instance-1。接下來讓我們演示如何在Multipass虛擬機上

284
00:35:18,770 --> 00:35:27,890
安裝一個網路應用程式。先確保網路伺服器正在運行

285
00:35:27,890 --> 00:35:34,100
好。好的，現在讓我們先啟動 apache。Apache 已經在運行。

286
00:35:35,780 --> 00:35:45,050
確保我們啟用它，以便它在實例重啟或停止時自動運行。然後

287
00:35:46,450 --> 00:35:50,170
預設情況下，apache 目錄在/var/www/html 中。

288
00:35:52,010 --> 00:35:56,210
在這裡，我將首先進入 /var/www。進而

289
00:35:59,150 --> 00:36:06,050
我將使用 wget 命令獲取我已經提供的網站。

290
00:36:09,810 --> 00:36:15,180
啊，這裡有一個用過的模板網站

291
00:36:15,180 --> 00:36:24,780
首先解壓網站網站數據。然後使用“sudo cp /var/www/html”

292
00:36:26,310 --> 00:36:34,970
移動所有網站數據到 /var/www/html。

293
00:36:36,070 --> 00:36:44,440
好的，因為我們也移動了一些目錄，所以我們需要 -R 選項。

294
00:36:44,440 --> 00:36:55,330
我們確保在當前目錄中，數據已經與我們的網站數據一起輸入。

295
00:36:55,330 --> 00:36:59,590
讓我們看看這裡的權限。它仍然歸“root”所有。我們必須先調整

296
00:37:00,960 --> 00:37:07,110
所有權。Ubuntu 上的Apache網絡伺服器的所有權是 www-data:www-data。

297
00:37:09,170 --> 00:37:15,500
"-R" 表示所有在目錄/ var / www / html（遞迴）的文件

298
00:37:15,500 --> 00:37:20,840
將被授權到 www-data:www-data。像這樣

299
00:37:20,840 --> 00:37:26,510
如果我們重新檢視現有的擁有者，它已經變成了 www-data。

300
00:37:27,430 --> 00:37:37,385
接下來，我們確保在 Web 瀏覽器中可以使用虛擬機的私有 IP 訪問。

301
00:37:37,385 --> 00:37:49,820
這裡的 IP 是 10.250.1.146。當我們訪問瀏覽器時，請確保網站正在運行。

302
00:37:49,820 --> 00:37:57,940
現在網站正在運行。

303
00:38:01,880 --> 00:38:12,160
這是一個簡單易用的方式，在Multipass虛擬機上運行一個網站。

304
00:38:13,040 --> 00:38:20,210
因此，有了 Multipass，我們就不再需要手動安裝作業系統了。

305
00:38:20,210 --> 00:38:26,180
我們不再需要手動安裝服務。因為這些服務

306
00:38:26,180 --> 00:38:35,240
我們可以在cloud-init調整。因此，作為開發人員，當然

307
00:38:35,240 --> 00:38:40,634
使用Multipass創建或部署應用程式會更快速。

308
00:38:40,634 --> 00:38:47,480
這就是全部。我是Nur Hamim。希望下次有機會再見。謝謝。

