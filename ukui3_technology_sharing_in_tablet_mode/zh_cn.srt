1
00:00:07,832 --> 00:00:08,985
hello，大家好

2
00:00:08,985 --> 00:00:11,569
 我是来自麒麟社区的张超

3
00:00:11,569 --> 00:00:17,912
今天由我就 UKUI3 平板模式进行一个简单的技术分享

4
00:00:17,912 --> 00:00:23,848
首先介绍一下 UKUI 的当前的一个最新的进展

5
00:00:23,848 --> 00:00:27,644
取得了哪些成果和实际的应用 案例

6
00:00:27,644 --> 00:00:32,809
然后我会具体分享一些新增平板模式的几个主要特性

7
00:00:32,809 --> 00:00:42,123
最后呢，再来谈一下 UKUI 的未来还有哪些重点需要开发和完善的功能点 

8
00:00:42,123 --> 00:00:45,811
首先简单介绍一下 UKUI

9
00:00:45,811 --> 00:00:51,400
UKUI是麒麟团队主导开发的一个轻量级 Linux开源桌面环境

10
00:00:51,400 --> 00:01:00,505
当前默认搭载在优麒麟开源操作系统和银河麒麟、中标麒麟操作系统的商业发行版中

11
00:01:00,505 --> 00:01:08,509
UKUI 其实也已经适配了很多国内外主流的 
 Linux 发行版

12
00:01:08,509 --> 00:01:11,997
比 如 Debian、Ubuntu、Fedora 、OpenEuler

13
00:01:11,997 --> 00:01:15,335
这些都已进入了他们的官方仓库

14
00:01:15,335 --> 00:01:18,682
未来将会推广到更多的 Linux 发行版中

15
00:01:18,682 --> 00:01:25,831
希望让更多的用户和开发者能够快速方便地使用UKUI

16
00:01:25,831 --> 00:01:31,567
UKUI除了传统端模式之外呢

17
00:01:31,567 --> 00:01:38,566
这次我们也新提供了一个平板模式来满足平 板应用生态和各种使用场景的需求

18
00:01:38,566 --> 00:01:44,340
本次的一个分享主要就是想介绍一下 UKUI 
 是如何在传统的 Linux 桌面基础上

19
00:01:44,340 --> 00:01:48,694
添加对平板生态的一个支持以及未来的规划

20
00:01:48,694 --> 00:01:55,521
还有在做平板模式的过程中我们也有一些项目和实际产品的一个经验和成果

21
00:01:55,521 --> 00:01:56,577
给大家分享一下

22
00:01:56,577 --> 00:02:04,668
UKUI 历史是随着优麒麟的社区版的发布一 起

23
00:02:04,668 --> 00:02:07,608
UKUI1.0 是 2013 年 

24
00:02:07,608 --> 00:02:14,371
当时还是基于 Unity 7、Ubuntu 7 进行的一个简单修改

25
00:02:14,371 --> 00:02:17,704
主要还是对主题和图标进行的修改 

26
00:02:17,704 --> 00:02:24,393
到了 2017 年发布了 UKUI 2.0

27
00:02:24,393 --> 00:02:30,189
当时是优麒麟发布一个自己研发的

28
00:02:30,189 --> 00:02:34,386
一个类似 Windows 用户体验的一个自研的 桌面环境

29
00:02:34,386 --> 00:02:38,185
到了去年也是 20.04 的 时 候

30
00:02:38,185 --> 00:02:41,866
我们正式发布了 UKUI3.0

31
00:02:41,866 --> 00:02:48,000
UKUI 3.0 整 个是由优麒麟团队自行设计的

32
00:02:48,000 --> 00:02:53,843
形成了一套自己的设计理念和这个交互的一个理念并研发完成 

33
00:02:56,587 --> 00:03:02,186
这里我给大家简单介绍一下 UKUI3.0 的一个基本技术架构

34
00:03:02,186 --> 00:03:09,232
如图所示，我们基本的显示服务是同时支持 X 和 Wayland

35
00:03:09,232 --> 00:03:14,351
基础的图形开发库我们是基于 Qt 和 KF5

36
00:03:14,351 --> 00:03:17,370
同时在 Qt、KF5 基础上

37
00:03:17,370 --> 00:03:23,449
我们还在不断的去封装和编写自己的一个高级接口

38
00:03:23,449 --> 00:03:33,511
在此之上，我们完全重写了一个各种核心的桌面组件

39
00:03:33,511 --> 00:03:41,273
包括开始菜单、任务栏、侧边栏、登录、多任务视图，文件管理器等等

40
00:03:41,273 --> 00:03:44,188
十几个桌面核心的组件

41
00:03:44,188 --> 00:03:49,134
在此之上呢我们还有很多桌面环境的套件基本应用

42
00:03:49,134 --> 00:03:52,867
也基本会大量自研

43
00:03:52,867 --> 00:04:05,069
所以包括上层的桌面环境套件以及核心的桌面环境组件

44
00:04:05,069 --> 00:04:09,315
以及一些基本的桌面环境的图形开发库

45
00:04:09,315 --> 00:04:16,053
这些包含在一起形成了我们现有的一个UKUI的一个基本架构

46
00:04:16,053 --> 00:04:24,896
从这份架构可以看到其实他还是一个相对和其他 Linux 桌面环境的架构基本上还是类似的

47
00:04:27,144 --> 00:04:30,926
从去年UKUI3.0发布至今已有一年多了

48
00:04:30,926 --> 00:04:36,601
在这一年的开发时间里面UKUI开发团队又主要做了一个平板

49
00:04:36,601 --> 00:04:38,453
增加了平板模式的开发

50
00:04:38,453 --> 00:04:45,562
针对平板模式我们同时也进行了一个市场倾向项目的一个探索和实践

51
00:04:45,562 --> 00:04:48,006
这里给大家简单介绍一下

52
00:04:48,006 --> 00:04:52,042
为了支持平板模式

53
00:04:52,042 --> 00:04:58,911
首先我们会增加对触摸功能的一个更好的支持

54
00:04:58,911 --> 00:05:04,581
除了常见的一个单指的触摸的点击、长按以及划动之外

55
00:05:04,581 --> 00:05:09,373
还支持多指以及不同的触摸的手势

56
00:05:09,373 --> 00:05:15,112
包括从屏幕的各个边缘滑入会有不同的一些特效和功能 

57
00:05:15,112 --> 00:05:18,005
除了对触摸功能增强之外

58
00:05:18,005 --> 00:05:24,930
我们还计划对系统所有的一个输入事件进行了统一的管理

59
00:05:24,930 --> 00:05:30,796
除了包括键盘鼠标、触摸板触摸以及手写笔等等

60
00:05:30,796 --> 00:05:39,780
会做一个统一的管理来统一各种输入方式的一个功能

61
00:05:39,780 --> 00:05:46,807
我们的触摸方案在开始是使用的 Touchegg 的方案

62
00:05:46,807 --> 00:05:49,446
Touchegg 方案主要是包含两部分

63
00:05:49,446 --> 00:05:54,000
一个是在 X 中实现了一个应用事件过滤器

64
00:05:54,000 --> 00:05:56,113
以及 Touchegg 开源方案本身

65
00:05:56,113 --> 00:06:00,434
 Touchegg 和 X 共用一个白名单

66
00:06:00,434 --> 00:06:05,290
然后 X 会对白名单的应用的触摸事件进行拦截

67
00:06:05,290 --> 00:06:09,908
再由 Touchegg 对白名单中的应用做触摸支持

68
00:06:09,908 --> 00:06:14,269
由 Touchegg 对触摸事件进行分析和处理

69
00:06:14,269 --> 00:06:16,241
执行对应的手势动作

70
00:06:16,241 --> 00:06:19,489
或者是将touch的事件转换成 X 鼠标事件

71
00:06:19,489 --> 00:06:21,829
再发给白名单中的应用

72
00:06:21,829 --> 00:06:24,130
实践中发现了几个问题

73
00:06:24,130 --> 00:06:31,088
一个就是说一些触摸的bug通过 Touchegg 这种方案不能运用

74
00:06:31,088 --> 00:06:35,864
需要配合 X 来再进行修改就处理起来很麻烦

75
00:06:35,864 --> 00:06:38,581
其次呢就说除了 X

76
00:06:38,581 --> 00:06:40,581
我们也是将 X 加 Touchegg 这个方案移植到了 Wayland 上

77
00:06:40,581 --> 00:06:42,826
也做了对 Wayland 的支持

78
00:06:42,826 --> 00:06:51,020
但还要再重新开发 Touchegg 需要的一些显示和这些 input 的接口

79
00:06:51,020 --> 00:06:53,287
就这个问题比较多

80
00:06:53,287 --> 00:06:56,725
还有就是一个稳定性和安全方面

81
00:06:56,725 --> 00:06:58,491
Touchegg  的权限要求比较高

82
00:06:58,491 --> 00:07:02,156
可能会存在一些安全的风险

83
00:07:02,156 --> 00:07:08,032
以及限制支持 Wayland、 X  这种方式的稳定性的一些缺陷

84
00:07:08,032 --> 00:07:12,270
所以基于此呢我们最后还是放弃了 Touchegg 这个方案

85
00:07:12,270 --> 00:07:21,376
在 Touchegg 实现之后呢我们自己又写了一个新的方案叫 Touch Manager

86
00:07:21,376 --> 00:07:24,101
新方案主要是分为两个部分

87
00:07:24,101 --> 00:07:25,763
一个是全局触摸手势

88
00:07:25,763 --> 00:07:27,586
一个是应用的内部手势

89
00:07:27,586 --> 00:07:30,911
全局触摸手势主要由 Kwin 来实现

90
00:07:30,911 --> 00:07:35,504
全局触摸手势主要由 Kwin 来实现

91
00:07:35,504 --> 00:07:38,227
然后把这些事件发到手势管理器

92
00:07:38,227 --> 00:07:42,359
手势管理器会将手势发送给每个手势识别器

93
00:07:42,359 --> 00:07:46,130
所有的识别器汇成一个手势的竞技场

94
00:07:46,130 --> 00:07:49,036
只要有一个手势识别器他的手势被满足

95
00:07:49,036 --> 00:07:52,204
那么手势管理器就可以执行该手势动作

96
00:07:52,204 --> 00:07:58,162
就不再将触摸事件继续向其他的手势识别器处分发

97
00:07:58,162 --> 00:08:02,342
也就是将其他的手势移出这个手势竞技场

98
00:08:02,342 --> 00:08:10,917
另外一个应用内部手势是通过插件来实现的一个手势识别

99
00:08:10,917 --> 00:08:13,772
比如说支持对 Qt 来讲

100
00:08:13,772 --> 00:08:15,366
就是以 Qt 应用为例

101
00:08:15,366 --> 00:08:18,949
手势识别插件呢就是类似于一个 QPA 的一个插件

102
00:08:18,949 --> 00:08:25,243
在所有 Qt 的应用里都会加载这个插件

103
00:08:25,243 --> 00:08:28,125
这样的话就会所有发送给 Qt 应用的事件

104
00:08:28,125 --> 00:08:33,662
都会被应用内部的 Widget 获取前会被这个手势插件来去监听到

105
00:08:33,662 --> 00:08:38,115
这个插件就会对触摸事件进行行为的分析和处理

106
00:08:38,115 --> 00:08:43,229
然后在特定情况下呢就可以实现一些手势的效果

107
00:08:43,229 --> 00:08:48,697
比如我们实现了对所有的一个滚动条实现一个惯性的滚动

108
00:08:48,697 --> 00:08:54,058
新方案现在我觉得有几个优势

109
00:08:54,058 --> 00:09:00,370
一个就是新的方案其实它是主要是在 Kwin 内部进行手势的处理

110
00:09:00,370 --> 00:09:04,672
不再需要像 Touchegg 一样做一个外挂一样向外暴露接口

111
00:09:04,672 --> 00:09:07,255
安全性更高而且对窗口的处理

112
00:09:07,255 --> 00:09:13,706
尤其是对窗口的移动啊特效啊这些会很方便而且扩展也很方便

113
00:09:13,706 --> 00:09:18,965
然后就是新方案的手势注册也比较灵活

114
00:09:18,965 --> 00:09:20,331
因为采用了一个手势竞技场的概念

115
00:09:20,331 --> 00:09:24,261
每个手势都对应一个单独的手势识别器

116
00:09:24,261 --> 00:09:28,050
可以任意的注册、注销等一些特定的手势

117
00:09:28,050 --> 00:09:35,654
新的方案由于是基于 Kwin

118
00:09:35,654 --> 00:09:41,973
所以在对Wayland的支持中会有更好的一个效果

119
00:09:41,973 --> 00:09:44,753
可以天生拿到一个更高的权限

120
00:09:44,753 --> 00:09:49,886
对于边缘全局的时间和窗口标题栏的一些冲突呢也更加可控

121
00:09:49,886 --> 00:09:59,185
而且就是现在方案对于 Qt 和 GTK 应用是采用了插件的形式

122
00:09:59,185 --> 00:10:03,595
只要安装了一些相对应的触摸插件就可以即插即用

123
00:10:03,595 --> 00:10:05,608
而且不会破坏原有的文件

124
00:10:05,608 --> 00:10:09,126
如果某个应用程序不想使用插件

125
00:10:09,126 --> 00:10:16,631
那么其实应用程序只要本身自己添加一个属性来拒绝使用相对应的插件就可以

126
00:10:16,631 --> 00:10:20,774
当前我们现在已经针对 Qt 和GTK开发了一个插件

127
00:10:20,774 --> 00:10:25,863
实现了部分的程序内部的一些手势动效

128
00:10:25,863 --> 00:10:32,909
Touch Manager 这个方案我们现在还是刚起步中

129
00:10:32,909 --> 00:10:34,563
主要是以触摸

130
00:10:34,563 --> 00:10:37,186
以触摸的手势功能实现

131
00:10:37,186 --> 00:10:39,840
后续还有很多工作要做

132
00:10:39,840 --> 00:10:44,660
比如说一个是手势的一个动画效果会后续逐步添加

133
00:10:44,660 --> 00:10:47,663
然后我们也计划会把触摸板

134
00:10:47,663 --> 00:10:50,916
以及压感笔全部纳入 Touch Manager 的一个管理

135
00:10:50,916 --> 00:10:59,784
将所有的触摸一些手势事件一个从设计上设计实现和管理上来讲

136
00:10:59,784 --> 00:11:02,030
也能统一的进行支持和管理

137
00:11:02,030 --> 00:11:08,165
两大基本形态一个是 PC 模式一个是平板模式

138
00:11:08,165 --> 00:11:10,275
在实际的应用生态中

139
00:11:10,275 --> 00:11:11,966
其实还存在更多的像帐篷模式、

140
00:11:11,966 --> 00:11:20,446
书本模式这些通过不同的旋转角度和屏幕的位置会产生不同的一些状态

141
00:11:20,446 --> 00:11:23,680
这些我们操作系统需要去响应和配合

142
00:11:23,680 --> 00:11:32,019
因此我们就开发了一个状态管理的一个组件来监听底层硬件状态的变化

143
00:11:32,019 --> 00:11:35,714
比如陀螺仪、笔记本盖子的状态

144
00:11:35,714 --> 00:11:39,457
并通过计算过滤出当前所需要的状态数据

145
00:11:39,457 --> 00:11:44,252
给出我们当前系统应该处于哪个状态

146
00:11:44,252 --> 00:11:46,713
同步提供给应用

147
00:11:46,713 --> 00:11:53,963
这个方案呢其实最开始我们是用的一个 session daemon 进行管理

148
00:11:53,963 --> 00:12:00,673
对翻折动作和一些防抖处理都在 session daemon 里面去做的

149
00:12:00,673 --> 00:12:06,340
但是 session daemon 作为一个配置管理服务不应该承担这个职能

150
00:12:06,340 --> 00:12:08,808
而且这个对硬件的耦合性太高

151
00:12:08,808 --> 00:12:13,858
所以后来我们又把它单独提供一个状态管理的服务

152
00:12:13,858 --> 00:12:16,626
这个服务主要是提供以下的功能

153
00:12:16,626 --> 00:12:20,931
一就是提供pc平板模式一个基本的切换的接口

154
00:12:20,931 --> 00:12:27,129
给系统的所有组件及应用比如输入法去使用

155
00:12:27,129 --> 00:12:32,169
因为输入法其实也要同时提供pc模式和平板模式

156
00:12:32,169 --> 00:12:35,400
这两种模式的输入法的功能界面和响应是完全不一样的

157
00:12:35,400 --> 00:12:42,271
所以输入法需要及时的配合pc模式和平板模式进行调整

158
00:12:42,271 --> 00:12:48,683
另外呢这种模式方案可以屏蔽硬件的差异性

159
00:12:48,683 --> 00:12:54,001
统一不同的硬件平台进行统一处理

160
00:12:54,001 --> 00:13:05,033
另外呢也是想统一的把状态管理的出入口以及状态的切换逻辑进行统一的实现管理

161
00:13:05,033 --> 00:13:10,971
这种开发UKUI新的平板模式的控制中

162
00:13:10,971 --> 00:13:18,206
我们同时也参与和结合了一个实际的产品项目来去做

163
00:13:18,206 --> 00:13:25,360
这是一个麒麟、Intel、腾讯、惠普面向教育行业

164
00:13:25,360 --> 00:13:26,631
比如 k12 用户

165
00:13:26,631 --> 00:13:31,886
推出了一个专属的教育学习的笔记本

166
00:13:31,886 --> 00:13:36,855
这边这个是四方合作

167
00:13:36,855 --> 00:13:44,352
其中 Intel 主要是负责硬件的驱动芯片包括从性能和功耗上进行优化

168
00:13:44,352 --> 00:13:48,566
然后腾讯主要提供其中的一个教育行业的软件实现

169
00:13:48,566 --> 00:13:58,134
惠普的提供者和对产品的硬件设计包括用户的产品调研以及市场推广

170
00:13:58,134 --> 00:14:00,842
麒麟主要负责整个的系统整合

171
00:14:00,842 --> 00:14:04,879
吸收整合其他三家提供的资源和技术

172
00:14:04,879 --> 00:14:07,626
同时将 UKUI 应用于最新的技术成果

173
00:14:07,626 --> 00:14:09,540
应用到最新产品中去

174
00:14:09,540 --> 00:14:15,110
这个产品其实是一个多模式的

175
00:14:15,110 --> 00:14:19,015
它支持 PC 和平板两种模式

176
00:14:19,015 --> 00:14:24,780
这就是对操作系统提出了一个更高的要求

177
00:14:24,780 --> 00:14:28,197
要求它同时支持pc和平板两种模式

178
00:14:28,197 --> 00:14:31,262
所以我们会有 UKUI 新的平板模式应运而生

179
00:14:31,262 --> 00:14:39,033
除了 PC 和平板两大模式之外

180
00:14:39,033 --> 00:14:43,631
其实这个整个设备中它是屏幕支持 360 度旋转

181
00:14:43,631 --> 00:14:47,993
那就说它实际会产生更多的模式

182
00:14:47,993 --> 00:14:54,200
比如说笔记本模式、站立模式、帐篷模式、书本模式还有平板模式

183
00:14:54,200 --> 00:15:01,780
针对这么多种模式，UKUI 也是针对实际的设备和实际的需求

184
00:15:01,780 --> 00:15:06,382
对平板模式和多模式切换进行了大量的优化和结构调整

185
00:15:06,382 --> 00:15:12,997
最后都能提供了一个良好的多模式和自由切换的一个功能体验

186
00:15:12,997 --> 00:15:22,615
这款产品主要是面向在线的教育行业

187
00:15:22,615 --> 00:15:27,341
当前已经是由惠普量产上市销售了

188
00:15:27,341 --> 00:15:32,870
其中搭载了 UKUI 是有各种深度的优化和特性

189
00:15:32,870 --> 00:15:38,223
一些新的特性也会同步到优麒麟的开源操作系统上去

190
00:15:38,223 --> 00:15:41,854
以后后续也会不断地去给它完善

191
00:15:41,854 --> 00:15:47,333
同时支持 PC 和平板模式

192
00:15:47,333 --> 00:15:51,297
这个笔记本是可以支持360度旋转

193
00:15:51,297 --> 00:15:57,741
当翻转的360度旋转屏幕翻转后就会自动切回维持到平板模式

194
00:15:57,741 --> 00:16:00,829
同时除了触摸外还支持压感笔

195
00:16:00,829 --> 00:16:06,541
除了两种常见的pc和平板模式之外它还可以支持帐篷倒立的模式

196
00:16:06,541 --> 00:16:10,070
甚至是90度竖立的书本模式

197
00:16:10,070 --> 00:16:18,104
在这个产品项目中除了我们UKUI平板模式的一个基本功能的验证之外

198
00:16:18,104 --> 00:16:22,929
我们还做了一些其他的一些优化包括针对输入法的

199
00:16:22,929 --> 00:16:27,281
因为同时支持 PC 和平板的输入

200
00:16:27,281 --> 00:16:39,776
需要对输入法框架做一些优化和一些处理和增强

201
00:16:39,776 --> 00:16:43,654
同时对蓝牙回连也做了一些优化

202
00:16:43,654 --> 00:16:51,289
通过对整个UKUI的桌面环境的一个功耗也做了一轮优化

203
00:16:51,289 --> 00:16:57,558
可以看到这个数据其实针对我们 3.0 的时候性能优化提高了很多

204
00:16:57,558 --> 00:17:05,212
下面给大家具体介绍一下在平板模式中引入的一些相关的特性

205
00:17:05,212 --> 00:17:07,937
首先电脑模式

206
00:17:07,937 --> 00:17:13,567
电脑模式主要是强化了对触摸的交互体验

207
00:17:13,567 --> 00:17:20,997
也就是改变了一些图案的布局、大小以及触控的范围做了些优化

208
00:17:20,997 --> 00:17:25,801
同时增加了侧边栏的设计

209
00:17:25,801 --> 00:17:33,091
因为很多一些消息的弹入、收纳以及模式的快速切换全部放到了侧边栏这个快速入口

210
00:17:33,091 --> 00:17:38,844
完全新增的平板模式它的 UI 则设计更为简洁

211
00:17:38,844 --> 00:17:42,825
整个的应用图标进行了重新的设计

212
00:17:42,825 --> 00:17:48,538
以及布局间距全部是按照平板的操作体验进行设计和实现的

213
00:17:48,538 --> 00:17:54,178
同时主页也增加了一个小工具插件的一个区域

214
00:17:54,178 --> 00:17:56,878
可以放置一些常用的插件

215
00:17:56,878 --> 00:18:00,905
这些小插件同时也支持收纳功能

216
00:18:00,905 --> 00:18:06,221
可以通过滑动去方便的快速的去隐藏这些小插件

217
00:18:06,221 --> 00:18:11,914
同时存在 PC 模式和平板模式

218
00:18:11,914 --> 00:18:19,526
那么它的模式切换可以通过自动侦测硬件的形态来切换到对应的模式

219
00:18:19,526 --> 00:18:23,878
同时用户也可以通过侧边栏去点击

220
00:18:23,878 --> 00:18:33,049
手动切换平板模式和 PC 模式

221
00:18:33,049 --> 00:18:42,186
同时平板模式最大的一个区别就是对应用的展现形式

222
00:18:42,186 --> 00:18:45,826
平板模式的展现形式以单窗口全屏的形式

223
00:18:45,826 --> 00:18:51,586
这样使应用可以最大化的得到一个平板状态的一个体验

224
00:18:51,586 --> 00:18:59,501
同时侧边栏则是从屏幕的最右侧向左侧滑出即可以呼出

225
00:18:59,501 --> 00:19:01,660
它包含了很多的快捷键

226
00:19:01,660 --> 00:19:06,779
很方便进行网络和模式的切换以及亮度和声音的调整

227
00:19:06,779 --> 00:19:15,307
同时侧边栏还包括了消息的收纳和消息的提醒功能

228
00:19:15,307 --> 00:19:21,954
方便用户快速的查看系统消息和应用消息

229
00:19:21,954 --> 00:19:24,320
也可以及时的跳转

230
00:19:24,320 --> 00:19:31,627
平板模式带来的另一个特性就是新的任务切换，多任务视图

231
00:19:31,627 --> 00:19:39,783
由于平板模式的特性就是需要有一个方便触摸使用的一个多任务视图

232
00:19:39,783 --> 00:19:45,688
可以很方便的使用手势进行任务的切换和任务的关闭

233
00:19:45,688 --> 00:19:54,907
在平板模式下的文件管理器和 PC 模式相比

234
00:19:54,907 --> 00:19:59,095
我们并没有对他进行太多的界面上的一个修改

235
00:19:59,095 --> 00:20:03,169
而是更多的优化了他的触摸的操作

236
00:20:03,169 --> 00:20:11,583
增加了复选框以及手指选中打开右键的相关的一些功能

237
00:20:11,583 --> 00:20:15,032
使触摸更易用

238
00:20:15,032 --> 00:20:18,257
同时我们还新增了一个全局搜索功能

239
00:20:18,257 --> 00:20:23,064
通过四指向下滑动就可以立即拖出全局搜索

240
00:20:23,064 --> 00:20:28,193
可以精准的匹配中英文以及方便本地和网络资源的搜索

241
00:20:28,193 --> 00:20:35,771
大家可以看到平板模式其实很大的一个工作就是新增一种新的交互方式

242
00:20:35,771 --> 00:20:40,260
在传统的鼠标键盘以及触控板的基础上

243
00:20:40,260 --> 00:20:48,483
需要增加触摸手势力以及压感笔对操作系统的使用的支持

244
00:20:48,483 --> 00:20:52,416
我们当前做到的是

245
00:20:52,416 --> 00:21:02,394
在用户在任意的 PC 模式和平板模式下都可以交替的使用鼠标、手势、触摸板、压感笔等设备进行操作

246
00:21:02,394 --> 00:21:05,492
在用手势或压感笔操作的同时

247
00:21:05,492 --> 00:21:08,071
鼠标指针就会自动隐藏

248
00:21:08,071 --> 00:21:18,002
而且针对触摸板和我们用触摸手指去进行的操作基本上功能行为是一致的

249
00:21:18,002 --> 00:21:23,166
和上面讲到的一些触摸交互上的一个平板模式支持

250
00:21:23,166 --> 00:21:26,482
这里还简单介绍两个有趣的小功能

251
00:21:26,482 --> 00:21:30,599
一个是护眼模式，同时我们会自动

252
00:21:30,599 --> 00:21:35,600
UKUI会根据当前的一个时间自动切换深色和浅色主题

253
00:21:35,600 --> 00:21:44,536
同时还支持用户自定义屏幕亮度以及主题色彩深浅

254
00:21:44,536 --> 00:21:52,693
另外我们通过AI识别技术，可以识别用户当前是否在盯着屏幕

255
00:21:52,693 --> 00:22:00,841
当用户连续注视屏幕一定时间或者用户的眼睛距离屏幕太近

256
00:22:00,841 --> 00:22:04,524
就坐姿不正确的时候我们也会弹出提醒

257
00:22:04,524 --> 00:22:07,617
提醒用户使用时间过久

258
00:22:07,617 --> 00:22:09,547
或者是坐姿不对

259
00:22:09,547 --> 00:22:12,792
太靠近屏幕会伤害视力这种提醒

260
00:22:12,792 --> 00:22:24,255
同时我们还支持智能的根据用户使用的场景来调整色温减少对眼睛的一个刺激

261
00:22:24,255 --> 00:22:29,207
同时我们在光线传感器和色彩传感器的一个配合下

262
00:22:29,207 --> 00:22:36,781
我们可以做到自动根据用户所在的一个场景来自适应调节屏幕的色温

263
00:22:36,781 --> 00:22:39,519
来减少对眼睛的一个刺激

264
00:22:39,519 --> 00:22:46,106
另一个有趣的功能点就是统一的身份认证

265
00:22:46,106 --> 00:22:53,781
将原来传统的一个本地账号变成了一个云端微信账号

266
00:22:53,781 --> 00:22:59,348
用户可以直接拿出手机扫码登录操作系统

267
00:22:59,348 --> 00:23:04,659
ok，以上简单介绍了一下我们 UKUI 当前的一个现状

268
00:23:04,659 --> 00:23:11,130
下面简单谈一下我们未来近期的一个规划

269
00:23:11,130 --> 00:23:18,515
首先针对平板模式，其实和pc模式差异较大的就是他需要一个很强大的通知系统

270
00:23:18,515 --> 00:23:23,964
后续我们会继续的完善整个的通知的体系

271
00:23:23,964 --> 00:23:26,763
同时对一个平板的操作还会再增强

272
00:23:26,763 --> 00:23:32,961
比如说对桌面图标的一个拖拽、分组管理包括一些应用的展现

273
00:23:32,961 --> 00:23:44,216
平板模式有一个很大的特色就是它同时只会展现一个前台的应用程序

274
00:23:44,216 --> 00:23:46,537
其余程序都在后台

275
00:23:46,537 --> 00:23:50,782
那么它的应用的一个生命周期的管理是和 PC 模式完全不一样的

276
00:23:50,782 --> 00:23:54,156
后续我们需要针对性的对它进行处理

277
00:23:54,156 --> 00:23:59,934
同时现在我们 UKUI3.1 在平板模式上面一些动画效果还比较欠缺

278
00:23:59,934 --> 00:24:01,857
之后我们也会继续完善

279
00:24:01,857 --> 00:24:06,485
平板模式对电源管理要求会比 PC 模式更为苛刻

280
00:24:06,485 --> 00:24:09,486
因为它的使用场景

281
00:24:09,486 --> 00:24:10,991
一定是需要低功耗

282
00:24:10,991 --> 00:24:13,106
省电模式这样一个状态

283
00:24:13,106 --> 00:24:18,457
这也是我们后续需要重点对它优化的地方

284
00:24:18,457 --> 00:24:25,759
同时输入的话，一个是压感笔以及触摸的输入法

285
00:24:25,759 --> 00:24:33,696
整个的输入体验也是我们需要进一步优化的方向

286
00:24:33,696 --> 00:24:42,104
同时对AI的一个支持包括整个桌面环境对语音和动作的交互

287
00:24:42,104 --> 00:24:46,316
还有一个是基于 AI 的数据搜索

288
00:24:46,316 --> 00:24:49,984
这些都是后续我们需要探索的一个方向

289
00:24:49,984 --> 00:24:52,504
ok，非常感谢大家

290
00:24:52,504 --> 00:24:57,330
以上就是我今天的一个技术分享欢迎大家来关注优麒麟

291
00:24:57,330 --> 00:25:01,701
关注 UKUI 来参与到 UKUI 和优麒麟的开发中

292
00:25:01,701 --> 00:25:04,911
好，谢谢大家

