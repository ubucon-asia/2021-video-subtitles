1
00:00:13,600 --> 00:00:14,700
Hello.

2
00:00:15,034 --> 00:00:22,700
In this session, I'd talk about the kernel hacking for signal tracing.

3
00:00:23,677 --> 00:00:30,611
My name is Leesoo Ahn. and I am currently working as an engineer at a wireless router company.

4
00:00:31,034 --> 00:00:40,900
I worked as a contributor at GNONE for 2 years from 2018, and I am currently conducting research related to the kernel.

5
00:00:42,100 --> 00:00:45,800
I'm sure some of you here already know about Signals.

6
00:00:46,700 --> 00:00:52,500
Signals are one of many inter-process communications that currently exist in Linux

7
00:00:52,500 --> 00:01:00,500
To give a simple example, here are two processes: a parent and a child.

8
00:01:00,500 --> 00:01:08,600
The parent is sending a message to the child, and this overall picture is IPC.

9
00:01:10,100 --> 00:01:14,200
And the message be used in here is Signal.

10
00:01:16,600 --> 00:01:20,300
Of course, children can also respond to their parents.

11
00:01:21,200 --> 00:01:26,100
It only depends on how the child program is implemented.

12
00:01:28,700 --> 00:01:33,700
The situation in the previous example is often what we see in textbooks.

13
00:01:34,700 --> 00:01:36,700
It seems to have no problems and it looks fine, but...

14
00:01:38,000 --> 00:01:43,700
There are more complicated situations than these happy situations in actual production.

15
00:01:47,100 --> 00:01:53,400
For example, there are cases where completely unrelated processes send a signal to their children,

16
00:01:53,400 --> 00:01:57,600
and there may be situations where the parent does not receive the signal.

17
00:02:00,300 --> 00:02:07,067
When we face a issue related in signals, it can be easily solved if you know how to analyze it,

18
00:02:07,900 --> 00:02:11,600
but how can we do it?

19
00:02:13,100 --> 00:02:17,500
Several tools are available to analyze these problems.

20
00:02:19,100 --> 00:02:27,034
The first is a tool you know. GDB is a line-by-lline debugger, and

21
00:02:27,267 --> 00:02:34,800
you can attach it to a process, and you can check the currently running statement line-by-line.

22
00:02:38,367 --> 00:02:44,867
Also, we can use Strace. Strace is lighter than GDB,

23
00:02:45,534 --> 00:02:51,100
and it is designed to focus in only System-calls and signals in our tracings.

24
00:02:52,900 --> 00:03:09,600
Third, we have Ftrace. Unlike GDB and Strace, Ftrace can trace system-wide and can analyze most events occurring in the kernel.

25
00:03:12,000 --> 00:03:16,000
There must be many other techniques that I am not aware of.

26
00:03:16,900 --> 00:03:18,734
But if

27
00:03:19,800 --> 00:03:22,000
the situation I showed you earlier happens 

28
00:03:23,100 --> 00:03:27,800
when the system is booting up, there are more things to consider.

29
00:03:31,800 --> 00:03:45,400
Tools such as GDB, Strace, and Ftrace are stored in the file system, but if the file system is being mounted at the time the problem occurs, we can't use them, plus,

30
00:03:47,600 --> 00:03:52,500
The order of execution between the target process and the debuggers should also be considered.

31
00:03:53,500 --> 00:04:02,200
For example, if we run the debuggers first before the target is executed, analysis wouldn't be made, right?

32
00:04:04,300 --> 00:04:17,200
Furthermore, in embedded systems, shell access is blocked for security, and we couldn't launch a debugger through a terminal, in such environments.

33
00:04:19,600 --> 00:04:23,800
Besides that, there are a few other things to consider.

34
00:04:24,500 --> 00:04:32,800
We know it isn't the core of the problem, but It forces us focus to such tiresome tasks, so it's so stressful and annoying.

35
00:04:34,800 --> 00:04:41,634
Rather than that, it would be better to focus on the original problem and finish it quickly, right?

36
00:04:44,700 --> 00:04:56,134
If it is correct to modify the code to solve this problem, wouldn't it be more efficient to access and analyze the signal handling routines in the kernel?

37
00:04:58,200 --> 00:05:00,800
I approached to it with this thinking.

38
00:05:03,200 --> 00:05:14,400
Again, there are two processes here, and the parent is sending a signal to the child. It is a view of signal processing in user level.

39
00:05:16,200 --> 00:05:18,400
and it is the kernel level view in practice.

40
00:05:18,400 --> 00:05:28,367
The parent requests a signal from the kernel through the 'kill' system-call, and the kernel handles taken signal, and delivers it to the child.

41
00:05:30,000 --> 00:05:37,700
If this kernel level is further subdivided, it can be divided into three stages as follows.

42
00:05:38,200 --> 00:05:42,900
Of the three stages, we will edit the code in stage-3.

43
00:05:44,900 --> 00:05:55,800
You may be thinking, 'There are three stages, so why am I going to edit in stage 3?' The first reason is related in security.

44
00:05:56,800 --> 00:06:04,500
The kernel must always handle an exception for the value sent by the users.

45
00:06:04,500 --> 00:06:15,000
For example, the users can pass an invalid integer to the kernel rather then signal number, so it must always be checked.

46
00:06:16,800 --> 00:06:20,900
Secend we should check the process, which is to make sure that the

47
00:06:20,900 --> 00:06:25,600
target is alive on the current system.

48
00:06:25,600 --> 00:06:30,500
If the process does not exist, there is no need to handle the signal.

49
00:06:32,300 --> 00:06:39,200
Also, if there are multiple threads in one process, you need to check which thread to send to.

50
00:06:43,200 --> 00:06:46,800
Then, you have to check for null pointers at the code level, 

51
00:06:47,034 --> 00:06:53,400
and there must be many other things such as security.

52
00:06:56,700 --> 00:07:02,000
Now we understand the reason for doing it in stage 3, but how should we fix it?

53
00:07:03,000 --> 00:07:09,900
In a nutshell, first, we will filter out all signals that is unnecessary in tracing.

54
00:07:12,000 --> 00:07:15,900
By printk, we'll output the results to a console.

55
00:07:18,200 --> 00:07:27,400
In the content, the process name and PID in the Sender, the process name and PID in the Receiver, and the signal number are output.

56
00:07:28,200 --> 00:07:33,500
This is a simple patch I made based on the information we looked at earlier

57
00:07:33,500 --> 00:07:42,700
I modified it to filter SIGCHLD and SIGALRM and output Sender and Receiver and signal numbers.

58
00:07:44,700 --> 00:07:49,500
This is the Kernel call stack executed when the 'kill' system-call is called,

59
00:07:49,500 --> 00:08:01,600
and after processing stages 1 and 2, it is adjusted to output after complete_signal is completed in the send_signal function.

60
00:08:02,600 --> 00:08:09,700
From now on, I will show you briefly using the system to which the aforementioned patch is applied.

61
00:08:18,000 --> 00:08:21,400
This terminal is currently connected to the Raspberry Pi.

62
00:08:22,700 --> 00:08:24,800
Currently doing a reboot.

63
00:08:26,000 --> 00:08:28,200
We will continue to explain after booting.

64
00:08:40,900 --> 00:08:47,600
Now the booting is complete, let's analyze the boot message slowly.

65
00:08:54,300 --> 00:09:00,200
As we can see here, before the file system is initialized in the boot phase, 

66
00:09:01,400 --> 00:09:10,000
As the signal can be transmitted as shown above, it is difficult to use the tracing tool described above.

67
00:09:10,900 --> 00:09:17,900
If you hack the kernel and analyze it, you can easily check it like this.

68
00:09:19,200 --> 00:09:28,100
Again, here is a message that the file system is being initialized and a signal is sent before that, and then we will send a

69
00:09:29,100 --> 00:09:37,800
signal through the kill command in the shell.

70
00:09:38,800 --> 00:09:46,800
Using this 'kill' command, I'm going to send a signal to the DHCP client, 

71
00:09:47,500 --> 00:09:51,500
and now I'm going to send a signal using the command.

72
00:09:53,700 --> 00:10:04,700
Then, as you can see in the kernel message, the Sender becomes the shell and the Reciever becomes the DHCP client in the shell.

73
00:10:05,000 --> 00:10:13,200
You can confirm that the SIGUSR1 signal is delivered through the message.

74
00:10:16,100 --> 00:10:26,634
Next, I will show you how the signal works when rebooting through the reboot command.

75
00:10:27,634 --> 00:10:31,500
I ran the reboot command.

76
00:10:31,867 --> 00:10:32,600
This will be

77
00:10:33,700 --> 00:10:38,200
 explained when the reboot process is completed to some extent.

78
00:10:54,800 --> 00:10:58,400
The reboot is now almost complete.

79
00:10:59,300 --> 00:11:06,700
I will explain the contents of the signal generated through the reboot command.

80
00:11:07,400 --> 00:11:17,367
First, when the reboot command is executed, a signal is sent to all processes in the current system.

81
00:11:20,000 --> 00:11:24,534
In the case of number 15, it becomes the SIGTERM signal number.

82
00:11:25,100 --> 00:11:32,100
In this way, when the process is completely terminated, a reboot is performed.

83
00:11:33,700 --> 00:11:46,400
Therefore, it is possible to analyze what kind of signals are invoked while rebooting through the kernel hacking.

84
00:11:50,200 --> 00:11:59,167
So, let's finish the demo demonstration and go back to the presentation.

85
00:12:03,900 --> 00:12:15,867
In this session, rather than deeply analyzing the kernel, I explained from the point of view that there was a certain issue and it was solved by modifying the kernel to solve it.

86
00:12:15,900 --> 00:12:20,800
I'm glad you've gotten even a little closer to the kernel, 

87
00:12:21,667 --> 00:12:24,600
and I'll end my presentation here.

88
00:12:24,867 --> 00:12:26,034
Thank you!

