1
00:00:06,467 --> 00:00:11,600
大家好，我是来自优麒麟社区的常秉善

2
00:00:11,634 --> 00:00:13,534
今天我给大家带来的主题分享是

3
00:00:13,534 --> 00:00:19,130
如何推进中国少数民族语言在 Ubuntu 上的本地化工作

4
00:00:19,967 --> 00:00:22,567
首先的话是一个简单的自我介绍

5
00:00:23,067 --> 00:00:28,100
我叫常秉善，我是来自优麒麟社区和KDE Network China

6
00:00:28,775 --> 00:00:32,615
我平时非常的喜欢和关注 FOSS

7
00:00:33,177 --> 00:00:39,277
我是一名 Ubuntu、优麒麟、Fedora 和ArchLinux 的用户

8
00:00:39,343 --> 00:00:44,971
我使用 Linux 的原因是因为我需要使用它们进行开发工作和打包工作

9
00:00:45,198 --> 00:00:52,732
我平常使用 C、C++、Python、Rust 和 Lisp进行我的编程开发工作。

10
00:00:54,925 --> 00:01:00,698
这个演示环境是使用了 ArchLinux 和 GNU Emacs

11
00:01:00,698 --> 00:01:04,735
然后你可以通过这两个邮箱来联系到我。 

12
00:01:06,647 --> 00:01:10,386
在这个主题分享的一开始

13
00:01:10,386 --> 00:01:14,526
我希望能够简单的介绍一下中国的少数民族状况

14
00:01:15,229 --> 00:01:18,000
中国有着56个民族

15
00:01:18,000 --> 00:01:21,192
其中的55个是少数民族群体

16
00:01:21,192 --> 00:01:24,840
他们其中的五十三个都有着自己的语言和文字系统

17
00:01:25,234 --> 00:01:29,885
促进他们各自语言的在 Ubuntu 上的一个本地化可以

18
00:01:29,885 --> 00:01:33,658
有助于保护中国少数民族的文化和历史传承

19
00:01:33,658 --> 00:01:39,323
这也是我们项目一开始关注的核心点

20
00:01:41,320 --> 00:01:44,782
这里的话，据我个人的了解

21
00:01:45,907 --> 00:01:54,228
我认为所有的操作系统上面多语言的支持是一个核心关注的要素

22
00:01:54,228 --> 00:01:58,300
对于中国的少数民族语言

23
00:01:58,300 --> 00:02:07,336
比如说像 Windows、macOS、Android、iOS 他们都是一个有着一个不同程度的支持

24
00:02:07,336 --> 00:02:10,995
据我个人了解，在中国的新疆省是

25
00:02:10,995 --> 00:02:17,942
 少数民族是偏向于使用 macOS 和 iOS

26
00:02:17,942 --> 00:02:24,722
因为 macOS 和 iOS 具有一个较好的维吾尔语的一个支持

27
00:02:24,722 --> 00:02:31,012
然后在中国的内蒙古省的话，可能大家就偏向于使用 Windows

28
00:02:31,012 --> 00:02:35,520
因为windows的内蒙古文支持是相对来说较好的

29
00:02:39,710 --> 00:02:49,677
然后相对来说，Linux 上面的中国少数民族多语言支持是比较弱的一个部分

30
00:02:49,677 --> 00:02:58,326
比如说像满语、内蒙古语、维吾尔语、藏语还有壮语

31
00:02:58,326 --> 00:03:02,922
在Linux上面都是一个非常残缺的一个支持现况

32
00:03:02,922 --> 00:03:10,778
这也是我们项目的一个立足的一个现况吧

33
00:03:10,778 --> 00:03:14,236
我们的工作是在2020年初开始的

34
00:03:14,236 --> 00:03:19,736
主要的话是对中国藏语在优麒麟上添加一个实验性的支持

35
00:03:19,736 --> 00:03:23,964
因为优麒麟是Ubuntu的一个官方子发行版本

36
00:03:23,964 --> 00:03:28,816
所以这些工作也同样适用于Ubuntu

37
00:03:28,816 --> 00:03:32,256
然后关于我们的本地化工作

38
00:03:32,256 --> 00:03:35,489
首先十分感谢西藏大学信息科学技术学院的

39
00:03:35,489 --> 00:03:39,335
尼玛扎西教授、仁增多杰教授、索南尖措教授和

40
00:03:39,335 --> 00:03:43,773
加央甲、三排才让等学生的帮助和支持

41
00:03:43,773 --> 00:03:54,062
接下来的话我想向大家介绍关于中国藏语的 Ubuntu 本地化工作的一个现况

42
00:03:54,062 --> 00:03:56,722
目前中国藏语的本地化在

43
00:03:56,722 --> 00:04:00,032
Ubuntu 跟优麒麟上的支持度是比较有限的

44
00:04:00,032 --> 00:04:03,505
然后这里的话我编写了一份支持的列表

45
00:04:03,505 --> 00:04:07,248
首先，关于支持的发行版

46
00:04:07,248 --> 00:04:11,581
是有 Ubuntu 和优麒麟

47
00:04:11,581 --> 00:04:19,200
然后覆盖的版本的话包括 Ubuntu 的16.04 跟 20.04

48
00:04:19,200 --> 00:04:23,427
还有就是优麒麟的 16.04、18.04 和 20.04

49
00:04:23,427 --> 00:04:31,961
这里可以看到我们所有的语言支持都是在长期支持版本上进行完成的

50
00:04:31,961 --> 00:04:40,738
然后接下来的话我想向大家介绍我们的一个翻译数据的一个情况

51
00:04:40,738 --> 00:04:46,568
因为操作系统的本地化工作是一个非常巨大的工作

52
00:04:46,568 --> 00:04:51,555
在过去的实践中我们的翻译覆盖量目前是在百分之四十以上

53
00:04:51,555 --> 00:04:55,496
然后据我们自己的统计是

54
00:04:55,496 --> 00:05:02,176
在Ubuntu跟优麒麟上所有的翻译数据分别是有

55
00:05:02,176 --> 00:05:06,020
接近 150000 条跟 172000 余条

56
00:05:06,020 --> 00:05:11,793
这里的翻译数据的话主要是来自中文语言包的一个翻译数据量

57
00:05:11,793 --> 00:05:17,080
这里我们对照的中文语言包是 language-pack-zh-hans

58
00:05:17,080 --> 00:05:20,336
和 language-pack-zh-hans-base

59
00:05:20,336 --> 00:05:28,445
然后我们完成的翻译大概是在 16.04 上是61000 余条

60
00:05:28,445 --> 00:05:33,672
在 20.04 上是接近 56000 条

61
00:05:33,672 --> 00:05:40,572
然后接下来的话我想介绍一下我们提供的一个语言包支持

62
00:05:40,572 --> 00:05:42,511
我们提供了一系列的语言包

63
00:05:42,511 --> 00:05:45,830
包括了像 kylin-language-pack-bo-cn 和

64
00:05:45,830 --> 00:05:51,022
kylin-language-pack-bo-cn-base，还有一个扩展的语言包

65
00:05:51,022 --> 00:05:56,449
这里的话，kylin-language-pack-bo-cn 是一个虚包

66
00:05:56,449 --> 00:06:02,019
主要是为了帮助 apt 去计算相关语言包的一个依赖

67
00:06:02,019 --> 00:06:04,988
就是说我们只需要安装这一个包

68
00:06:04,988 --> 00:06:11,120
它就会自动去拉取一个 base 包跟一个扩展包还有一些其他的语言设置包

69
00:06:11,120 --> 00:06:17,045
还有同样也包括我们使用的字体支持

70
00:06:17,045 --> 00:06:25,378
这里的话 kylin-language-pack-bo-cn-base 包

71
00:06:25,378 --> 00:06:31,975
主要是存储的所有使用 Gettext 翻译文件格式的应用的一个翻译文件

72
00:06:31,975 --> 00:06:34,678
比如说像 po 和 mo 文件

73
00:06:34,678 --> 00:06:43,467
然后扩展包的话主要是对使用 Qt 多语言支持文件格式的应用

74
00:06:43,467 --> 00:06:45,808
去提供翻译的扩展支持

75
00:06:45,808 --> 00:06:48,844
比如说像 ts 和 qm 文件

76
00:06:48,844 --> 00:07:01,006
然后我们可以查看一下我们的语言包支持的一个 control 文件

77
00:07:01,006 --> 00:07:08,529
然后他的话实际上是由一份源码包编译出来这些包

78
00:07:08,529 --> 00:07:16,904
然后这里的话我们也可以看一下构建的一个过程

79
00:07:16,904 --> 00:07:21,306
构建的话主要是针对 po 和 mo 进行一个分别的构建

80
00:07:21,306 --> 00:07:26,359
然后它的支持列表相对来说比较复杂的

81
00:07:26,359 --> 00:07:37,091
接下来的话我对我们过去两年中的一个开发模式进行一个简单介绍

82
00:07:37,091 --> 00:07:43,440
总体上来看我们的开发模式是跨越了多种数据存储的方式

83
00:07:43,440 --> 00:07:52,965
然后这里的话我们所有的翻译数据正如之前所提到的是来自于中文语言包

84
00:07:52,965 --> 00:07:58,041
然后我们通过中文语言包来构造一系列空的藏语翻译文件

85
00:07:58,041 --> 00:08:03,302
然后我们将这两部分的数据都导入到

86
00:08:03,302 --> 00:08:07,713
我们在 GitHub 上托管的 git 仓库之中去

87
00:08:07,713 --> 00:08:13,782
然后通过 git 仓库再来导出一个中文跟藏语的对照的数据表

88
00:08:13,782 --> 00:08:17,476
这个数据表的话是在一开始去进行构建的

89
00:08:17,476 --> 00:08:21,449
也就是我待会会讲的 stage0 部分的工作

90
00:08:21,449 --> 00:08:24,894
我们在导出了对照表之后

91
00:08:24,894 --> 00:08:35,025
然后由我们的翻译人员再对这部分的对照表进行翻译

92
00:08:35,025 --> 00:08:37,214
然后由我们的翻译人员再对这部分的对照表进行翻译

93
00:08:37,214 --> 00:08:42,103
然后我们再将它同步导入到我们的git仓库中去

94
00:08:42,103 --> 00:08:49,306
然后我们同样还依据这个git仓库来构建了一个翻译数据库

95
00:08:49,306 --> 00:08:51,609
这个翻译数据库话是在本地的

96
00:08:51,609 --> 00:08:59,934
然后这个翻译数据库主要是为了提供一个翻译的自匹配

97
00:08:59,934 --> 00:09:04,362
这个自匹配待会我们会在 stage 1 里面去进行一个简单的介绍

98
00:09:04,362 --> 00:09:11,554
同样的这个 git 仓库跟我们的 Weblate 平台是提供的一个双向同步支持

99
00:09:11,554 --> 00:09:17,505
Weblate 平台的话主要是提供了翻译的一个前端的界面编辑支持

100
00:09:17,505 --> 00:09:26,134
然后我们的 git 仓库可以生成出我们的藏语的语言包

101
00:09:26,134 --> 00:09:29,013
就是我们之前刚刚提到的三个语言包

102
00:09:29,013 --> 00:09:33,447
这部分的工作也是可以进行自动构建

103
00:09:33,447 --> 00:09:43,880
关于 stage 0 的话，主要是我们在藏语本地化工作的早期阶段的状况描述

104
00:09:43,880 --> 00:09:50,334
尽管在2020年代，就是 ubuntu 相对来说

105
00:09:50,334 --> 00:09:51,971
是一个比较流行的发行版本

106
00:09:51,971 --> 00:09:55,516
但是它的开发流程对于

107
00:09:55,516 --> 00:10:00,388
刚刚开始参与贡献的大学教授跟学生来说是具有一定的门槛的

108
00:10:00,388 --> 00:10:06,874
所以在起初的话我们并没有去使用ubuntu的那些开发平台像 launchpad

109
00:10:06,874 --> 00:10:11,817
还有他的一些 patch 跟 dpkg 的一些工具

110
00:10:11,817 --> 00:10:19,245
在一开始我是将系统范围内的所有翻译文件都导出成了中文和英文对照的 Excel 表格

111
00:10:19,245 --> 00:10:21,529
格也就是我们刚刚提到的对照表

112
00:10:21,529 --> 00:10:27,039
然后这个表格主要是用来便于不熟悉 Ubuntu 开发工具的人员

113
00:10:27,039 --> 00:10:30,427
能够尽可能简单的参与到翻译贡献中去

114
00:10:30,427 --> 00:10:37,537
然后我们没有使用launchpad进行翻译工作的一个主要原因是

115
00:10:37,537 --> 00:10:40,076
它没有一个较好的中文界面支持

116
00:10:40,076 --> 00:10:43,419
而且它的交互操作存在一定的繁琐性

117
00:10:43,419 --> 00:10:47,844
然后在那个时候我们还没有部署自己的 Weblate 服务

118
00:10:47,844 --> 00:10:51,481
所以的话我们使用了 git 仓库

119
00:10:51,481 --> 00:10:55,570
然后再导出 Excel 表的方式来管理我们的翻译数据

120
00:10:55,570 --> 00:10:59,701
这样子管理的翻译数据大概是有 30000 条左右

121
00:10:59,701 --> 00:11:04,329
我们的仓库是位于 GitHub 上面

122
00:11:04,329 --> 00:11:14,328
感兴趣的朋友可以在我们的 GitHub 仓库中查看我们的一个最新的状况

123
00:11:14,328 --> 00:11:26,071
这里的话一个是 16.04 上，一个是20.04上的翻译文件的托管状态

124
00:11:26,071 --> 00:11:36,545
然后在第二阶段的话我们部署了自己的自托管的Weblate服务

125
00:11:36,545 --> 00:11:42,114
是为了更好的同步跟仓库跟一个在线翻译服务的数据库

126
00:11:42,114 --> 00:11:46,605
在这个阶段的话我们构建了一个本地的翻译数据库

127
00:11:46,605 --> 00:11:49,876
主要是为了便于存储所有已经翻译的词条

128
00:11:49,876 --> 00:11:55,230
然后在这些翻译的基础上面利用像 Levenshtein 距离这些方法

129
00:11:55,230 --> 00:11:59,743
对近似的翻译根据编辑距离去做一个模糊匹配

130
00:11:59,743 --> 00:12:03,155
然后这样子我们大概扩充了一万条左右的翻译

131
00:12:03,155 --> 00:12:07,174
当然这部分翻译还是需要人工进行再次复核

132
00:12:07,174 --> 00:12:14,404
然后这里的话我本地是有一个翻译数据库的一个副本

133
00:12:14,404 --> 00:12:19,754
然后这里的话可以看到是总共是有 172369 条数据

134
00:12:19,754 --> 00:12:25,493
然后其中藏语的翻译数据量的话大概也是在40%以上

135
00:12:25,493 --> 00:12:32,135
它这是一个非常巨大的量

136
00:12:32,135 --> 00:12:35,419
可以看到其中在藏语的一个翻译情况

137
00:12:35,419 --> 00:12:42,912
然后我们刚刚说到的模糊匹配的话

138
00:12:42,912 --> 00:12:47,168
是一个基于 Levenshtein 距离的一个改进方法

139
00:12:47,168 --> 00:12:50,956
然后它是有别于字符串编辑距离比较的

140
00:12:50,956 --> 00:12:55,391
我自己将它称为是基于藏语音节的编辑距离比较

141
00:12:55,391 --> 00:12:58,508
然后这里的话一个藏语音节是包含基字

142
00:12:58,508 --> 00:13:02,239
元音、上加字、下加字、前加字、后加字和再后加字

143
00:13:02,239 --> 00:13:05,788
一个组成部分就是一个字符

144
00:13:05,788 --> 00:13:10,621
然后一个音节的话就是最多是由七个字符来组成

145
00:13:10,621 --> 00:13:13,378
最少的话也是有三到四个字符的

146
00:13:13,378 --> 00:13:19,327
然后通过变更一个基于字符的方式为基于音节的方式

147
00:13:19,327 --> 00:13:26,198
我们可以过滤掉一些和音节无关的编辑操作的干扰

148
00:13:26,198 --> 00:13:42,014
然后的话这里的藏语音节的一个解析支持的话

149
00:13:42,014 --> 00:13:48,378
也是再次感谢西藏大学的尼玛扎西教授提供的一个理论支持

150
00:13:48,378 --> 00:13:58,800
我们这里的藏语音节的编辑方法是来自于藏语排序的一个理论方法

151
00:13:58,800 --> 00:14:08,983
然后通过他的这个方法实现了一系列的状态机群组

152
00:14:08,983 --> 00:14:12,558
然后对这些东西进行一个简单的解析

153
00:14:12,558 --> 00:14:21,599
然后第三个阶段的话我们就开始使用Weblate平台进行一个开源的协同翻译

154
00:14:21,599 --> 00:14:25,394
然后同时迭代构建我们的语言包

155
00:14:25,394 --> 00:14:33,278
尽管说我们这里说到是使用了开源协同的模式

156
00:14:33,278 --> 00:14:38,620
但是我们的协同开发并不是分布在全球的

157
00:14:38,620 --> 00:14:46,827
尽管并不是分布在全球，但是也是跨越了几千公里然后把我们团队中的每个成员连接了起来

158
00:14:46,827 --> 00:14:51,838
然后你可以在这个网址去访问我们的Weblate服务

159
00:14:51,838 --> 00:14:58,550
这里的话可以看到藏语的一个翻译比例是在 41%

160
00:14:58,550 --> 00:15:00,733
依然后没有翻译的词条是接近88000条

161
00:15:00,733 --> 00:15:05,071
后所有的组件的话大概是有 500 多个组件

162
00:15:05,071 --> 00:15:10,409
500多个组件的话是覆盖了系统中的大多数应用

163
00:15:10,409 --> 00:15:12,035
大多数关键性组件的

164
00:15:12,035 --> 00:15:20,258
像libc，glib 还有 GNOME 的软件

165
00:15:20,258 --> 00:15:30,524
然后我在我的本地安装了一个集成了藏语语言包的优麒麟系统

166
00:15:30,524 --> 00:15:33,198
然后它是通过QEMU来安装的

167
00:15:33,198 --> 00:15:40,359
然后接下来的话让我们去简单的去看一看

168
00:15:40,359 --> 00:15:54,001
这里的话就是优麒麟20.04的一个安装好的系统

169
00:15:54,001 --> 00:15:59,507
然后实际上我们对大部分应用就是主要是像 UKUI 的应用

170
00:15:59,507 --> 00:16:03,922
还有一些 GTK 的应用进行了一个翻译的覆盖支持

171
00:16:03,922 --> 00:16:16,659
这里的话我们可以通过 UKUI 的控制面板去对整个系统的一个语言状况进行一个切换

172
00:16:16,659 --> 00:16:22,212
像这里的话都是提供了大量的藏语的语言的支持

173
00:16:22,212 --> 00:16:24,412
这里的话我们将藏语设置为了

174
00:16:24,412 --> 00:16:28,278
这个环境中将藏语设置为了第一支持的语言

175
00:16:28,278 --> 00:16:32,501
然后第二支持语言是汉语，其次是英语

176
00:16:32,501 --> 00:16:39,360
然后说到 UKUI 的控制面板

177
00:16:39,360 --> 00:16:43,169
控制面板的大部分翻译是已经接近完成的

178
00:16:43,169 --> 00:16:47,830
尽管还有一些残留的没有支持的部分

179
00:16:47,830 --> 00:16:53,638
但是相对来说可用性已经是具备了一定的

180
00:16:53,638 --> 00:16:55,569
设置接口的翻译完全覆盖

181
00:16:55,569 --> 00:17:02,007
后像一些传统的 GTK 应用比如像 MATE 的 Terminal

182
00:17:02,007 --> 00:17:05,137
也是有了一个完整藏语支持

183
00:17:05,137 --> 00:17:09,860
然后这里的我们打开了终端就可以简单的介绍一下

184
00:17:09,860 --> 00:17:14,222
像一些 cli 程序的藏语翻译支持

185
00:17:14,222 --> 00:17:16,406
比如说像常用的 sudo

186
00:17:16,406 --> 00:17:21,599
也是有一个密码提示上的藏语本地化支持

187
00:17:21,599 --> 00:17:29,974
还有一些常见的命令像ls、df也是有一些藏语的支持的

188
00:17:29,974 --> 00:17:31,859
但并没有完全的覆盖完成

189
00:17:31,859 --> 00:17:42,587
然后接下来的话可以看一下 UKUI 的默认的文件管理器

190
00:17:42,587 --> 00:17:46,055
然后也是有了初步的一个藏语的支持

191
00:17:46,055 --> 00:17:53,284
包括像一些设置选项的支持还有视图的设置支持

192
00:17:53,284 --> 00:17:59,320
然后这里还有一些像tag标记的支持

193
00:17:59,320 --> 00:18:09,915
然后对于 GTK 应用，其实像 Pluma

194
00:18:09,915 --> 00:18:18,121
还有像打印的一个设置都是进行了一个完全的一个藏语支持

195
00:18:18,121 --> 00:18:23,492
因为这部分功能是作为日常生活中最为常用的功能

196
00:18:23,492 --> 00:18:26,541
所以我们也是优先进行的一个本地化支持

197
00:18:26,541 --> 00:18:31,732
还有一些像扫雷之类的游戏

198
00:18:31,732 --> 00:18:35,550
GTK 游戏也是有一些简单的藏语支持

199
00:18:35,550 --> 00:18:44,448
然后除此之外的话，这里还有就是值得一说的就是Gimp

200
00:18:44,448 --> 00:18:48,418
也是完成了一个完成度很高的藏语翻译支持

201
00:18:48,418 --> 00:19:01,558
基本上是覆盖了所有的像 Tooltip 还有标签栏的一些选项都是进行了一个完整的藏语覆盖

202
00:19:01,558 --> 00:19:08,961
除了这些常用的 GTK 应用之外

203
00:19:08,961 --> 00:19:16,657
我们对整个 UKUI 桌面环境中的应用也做了一个完整藏语支持

204
00:19:16,657 --> 00:19:21,237
比如说我们日常常用的工具比如说计算器

205
00:19:21,237 --> 00:19:25,362
也是有一个初步的藏语支持

206
00:19:25,362 --> 00:19:31,789
还有搜索同样的还有视频播放软件

207
00:19:31,789 --> 00:19:41,199
这里的话视频播放软件也是有一些设置上的藏语的一个本地化支持

208
00:19:46,289 --> 00:19:51,627
这里的话翻译的完成度还是比较高的

209
00:19:53,117 --> 00:20:04,449
还有就是优麒麟提供的一个硬件机器检查的一个工具

210
00:20:04,449 --> 00:20:06,906
是一个麒麟助手

211
00:20:06,906 --> 00:20:12,358
我们对它的一些硬件标识也进行了大量的翻译工作

212
00:20:21,048 --> 00:20:32,381
然后这里还有值得一说的就是我们跟搜狗公司合作的一个藏语输入法的支持

213
00:20:32,381 --> 00:20:38,838
然后也是填补了输入模式上的藏语支持的一个空白

214
00:20:38,838 --> 00:20:43,425
然后主要的话是包括音节的自动联想

215
00:20:43,425 --> 00:20:49,030
然后主要的话是包括音节的自动联想

216
00:20:49,030 --> 00:20:51,424
这样的支持

217
00:20:51,424 --> 00:20:57,830
这里的话十分感谢搜狗公司对于优麒麟藏语本地化的一个推进工作的支持

218
00:20:57,830 --> 00:21:11,142
然后关于优麒麟 20.04 上的一个藏语的翻译支持程度的演示 demo 大概就到这里就结束了

219
00:21:20,450 --> 00:21:25,135
我们接下来的话我为大家介绍一下我们后续的一个计划

220
00:21:25,135 --> 00:21:29,708
就是尽管我们在 Ubuntu 的藏语本地化上来说已经有了一个比较好的开始

221
00:21:29,708 --> 00:21:32,811
但是我们后续需要去做的工作还是有很多的

222
00:21:32,811 --> 00:21:43,424
我们计划进一步翻译整个 Ubuntu 中的词条

223
00:21:43,424 --> 00:21:47,612
然后去为更多的没有翻译的去进行翻译

224
00:21:47,612 --> 00:21:54,878
然后第二部分的话就是推进整个项目的一个完全和纯粹的开源

225
00:21:54,878 --> 00:22:05,062
因为目前的话我们可以看到 git 仓库中使用的协议的话还是一个专有的协议

226
00:22:05,062 --> 00:22:10,126
因为我们并没有取得所有参与翻译人员的一个授权许可

227
00:22:10,126 --> 00:22:19,748
所以我们也在逐渐的推进所有的翻译人员去确认他们的翻译状况的一个授权

228
00:22:19,748 --> 00:22:27,101
然后这个部分的话就是我们想要去推进这个项目的开源

229
00:22:27,101 --> 00:22:33,887
然后更进一步的话就是为其他的一些少数民族语言去提供本地化支持

230
00:22:33,887 --> 00:22:40,355
像我们计划中的话是有维吾尔语、内蒙古语、满语和壮语的

231
00:22:40,355 --> 00:22:43,183
一个少数民族语言本地化支持

232
00:22:43,183 --> 00:22:55,732
最后感谢大家的观看

233
00:22:55,732 --> 00:23:04,148
在最后，我想再次感谢尼玛扎西教授、仁增多杰教授、索南尖措教授

234
00:23:04,148 --> 00:23:07,986
还有加央甲先生和三排才让先生

235
00:23:07,986 --> 00:23:13,264
他们极大的帮助到了我们的藏语本地化工作

236
00:23:13,264 --> 00:23:18,266
谢谢大家

