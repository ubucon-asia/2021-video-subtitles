1
00:00:06,467 --> 00:00:11,600
Hello everyone, I am Burgess Chang from the Ubuntu Kylin community

2
00:00:11,634 --> 00:00:13,534
The topic sharing I brought to you today is

3
00:00:13,534 --> 00:00:19,130
how to promote the localization of the ethnic minority languages of China on Ubuntu

4
00:00:19,967 --> 00:00:22,567
The first words are a simple self-introduction

5
00:00:23,067 --> 00:00:28,100
My name is Burgess Chang,and I am from Ubuntu Kylin Community and KDE Network China

6
00:00:28,775 --> 00:00:32,615
I usually like and care about FOSS very much

7
00:00:33,177 --> 00:00:39,277
I am a user of Ubuntu, Ubuntu Kylin ,Fedora and ArchLinux

8
00:00:39,343 --> 00:00:44,971
The reason why I use Linux is because I need to use them for development work and package work

9
00:00:45,198 --> 00:00:52,732
I usually use C, C++, Python, Rust and Lisp for my programming development work

10
00:00:54,925 --> 00:01:00,698
This demo environment uses ArchLinux and GNU Emacs

11
00:01:00,698 --> 00:01:04,735
Then you can contact me through these two emails

12
00:01:06,647 --> 00:01:10,386
At the beginning of this topic sharing

13
00:01:10,386 --> 00:01:14,526
I hope to briefly introduce the situation of ethnic minorities in China

14
00:01:15,229 --> 00:01:18,000
China has 56 ethnicities

15
00:01:18,000 --> 00:01:21,192
55 of which are ethnic minorities

16
00:01:21,192 --> 00:01:24,840
Fifty-three of them have their own language and character system

17
00:01:25,234 --> 00:01:29,885
Promoting a stabilization of their own language on ubuntu can 

18
00:01:29,885 --> 00:01:33,658
help protect the cultural and historical heritage of Chinese ethnic minorities

19
00:01:33,658 --> 00:01:39,323
This is also the core aim of our project at the beginning

20
00:01:41,320 --> 00:01:44,782
according to my personal understanding

21
00:01:45,907 --> 00:01:54,228
I think that the multilingual support of all operating systems is an element of core concern

22
00:01:54,228 --> 00:01:58,300
For the ethnic minority languages of China

23
00:01:58,300 --> 00:02:07,336
 such as Windows, macOS, Android, iOS, they all have different degrees of support

24
00:02:07,336 --> 00:02:10,995
According to my personal understanding, in China's Xinjiang province,

25
00:02:10,995 --> 00:02:17,942
ethnic minorities prefer to use macOS and iOS

26
00:02:17,942 --> 00:02:24,722
because macOS and iOS have a better Uyghur-Chinese language support

27
00:02:24,722 --> 00:02:31,012
Then in China's Inner Mongolia, everyone may prefer to use Windows

28
00:02:31,012 --> 00:02:35,520
Because Mongolian-Chinese language support of Windows is relatively good

29
00:02:39,710 --> 00:02:49,677
And relatively, the Chinese ethnic minorities multilingual support on Linux is a relatively weak part

30
00:02:49,677 --> 00:02:58,326
For example, Manchu-Chinese language, Mongolian-Chinese language, Uyghur-Chinese language, Tibetan-Chinese and Zhuang-Chinese Language

31
00:02:58,326 --> 00:03:02,922
are all very incomplete support status on Linux

32
00:03:02,922 --> 00:03:10,778
This is also the status quo of our project

33
00:03:10,778 --> 00:03:14,236
Our work started at the beginning of 2020

34
00:03:14,236 --> 00:03:19,736
The main thing is to add an experimental support to the Tibetan-Chinese language on Ubuntu Kylin

35
00:03:19,736 --> 00:03:23,964
Because Ubuntu Kylin is an official flavor of Ubuntu

36
00:03:23,964 --> 00:03:28,816
these work are also applicable to Ubuntu

37
00:03:28,816 --> 00:03:32,256
Then, regarding our localization work

38
00:03:32,256 --> 00:03:35,489
 I would like to express my gratitude for the help and support of some people from Information Science and Technology college of Tibetan University

39
00:03:35,489 --> 00:03:39,335
They are Professor ཉི་མ་བཀྲ་ཤིས། , Professor རིག་འཛིན་རྡོ་རྗེ། , Professor བསོད་ནམས་རྒྱ་མཚོ། 

40
00:03:39,335 --> 00:03:43,773
and འཇམ་དབྱངས་རྒྱལ། , བསམ་འཕེལ་ཚེ་རིང་། , etc

41
00:03:43,773 --> 00:03:54,062
.In the following words, I would like to introduce to you the current situation of Ubuntu localization in Tibetan-Chinese language

42
00:03:54,062 --> 00:03:56,722
At present, the support for the localization of Tibetan-Chinese language

43
00:03:56,722 --> 00:04:00,032
on ubuntu and Ubuntu Kylin is relatively limited

44
00:04:00,032 --> 00:04:03,505
Then I wrote a list of support here

45
00:04:03,505 --> 00:04:07,248
 First of all, regarding the supported distributions,

46
00:04:07,248 --> 00:04:11,581
there are Ubuntu and Ubuntu Kylin

47
00:04:11,581 --> 00:04:19,200
Then the covery versions include Ubuntu 16.04 and 20.04

48
00:04:19,200 --> 00:04:23,427
and there are also Ubuntu Kylin 16.04, 18.04 and 20.04

49
00:04:23,427 --> 00:04:31,961
Here you can see that all our language support is done on a long-term support version

50
00:04:31,961 --> 00:04:40,738
Then, I would like to introduce to you one of our translation data

51
00:04:40,738 --> 00:04:46,568
Because the localization of the operating system is a huge work

52
00:04:46,568 --> 00:04:51,555
in the past practice, our translation coverage is currently more than 40%

53
00:04:51,555 --> 00:04:55,496
Then, according to our own statistics

54
00:04:55,496 --> 00:05:02,176
on Ubuntu and Ubuntu Kylin

55
00:05:02,176 --> 00:05:06,020
there are nearly 150,000 and more than 172,000 translated data

56
00:05:06,020 --> 00:05:11,793
The translation data here is mainly derived from a translation data tone of the Chinese language pack

57
00:05:11,793 --> 00:05:17,080
 The Chinese language packs we are comparing here are language-pack-zh-hans

58
00:05:17,080 --> 00:05:20,336
and language-pack-zh-hans-base

59
00:05:20,336 --> 00:05:28,445
Then the translations we completed were roughly 61100 on 16.04

60
00:05:28,445 --> 00:05:33,672
and nearly 56,000 on 20.04

61
00:05:33,672 --> 00:05:40,572
Then I would like to introduce a language pack support we provide

62
00:05:40,572 --> 00:05:42,511
We provide a series of language packages

63
00:05:42,511 --> 00:05:45,830
including kylin-language-pack-bo-cn

64
00:05:45,830 --> 00:05:51,022
and kylin-language-pack-bo-cn-base, as well as an extra language pack

65
00:05:51,022 --> 00:05:56,449
Here, kylin-language-pack-bo-cn is a virtual package

66
00:05:56,449 --> 00:06:02,019
mainly to help apt to calculate a dependency of related language packages

67
00:06:02,019 --> 00:06:04,988
It means that we only need to install this package

68
00:06:04,988 --> 00:06:11,120
 and it will automatically pull a base package, an extension package, and some other language setting packages

69
00:06:11,120 --> 00:06:17,045
 as well as support for the fonts we use

70
00:06:17,045 --> 00:06:25,378
The words here in the kylin-language-pack-bo-cn-base package

71
00:06:25,378 --> 00:06:31,975
It are mainly a translation file for all applications that use the Gettext translation file format to store

72
00:06:31,975 --> 00:06:34,678
such as the PO and MO files

73
00:06:34,678 --> 00:06:43,467
Then the extra package is mainly for applications that use the Qt multi-language support file format

74
00:06:43,467 --> 00:06:45,808
to provide extended translation support

75
00:06:45,808 --> 00:06:48,844
such as the TS and QM files

76
00:06:48,844 --> 00:07:01,006
Then we can check a control file supported by our language package

77
00:07:01,006 --> 00:07:08,529
Then its words were actually compiled and translated from a copy of a source package

78
00:07:08,529 --> 00:07:16,904
Then we can take a look at the construction process of the package.

79
00:07:16,904 --> 00:07:21,306
The construction is mainly aimed at a separate construction of PO and MO

80
00:07:21,306 --> 00:07:26,359
And its support list is relatively complicated

81
00:07:26,359 --> 00:07:37,091
Next, I will give a brief introduction to one of our development models in the past two years

82
00:07:37,091 --> 00:07:43,440
our development model has crossed multiple data storage methods

83
00:07:43,440 --> 00:07:52,965
Then all of our translation data are from the Chinese language pack as mentioned before

84
00:07:52,965 --> 00:07:58,041
and then we use the Chinese language pack to construct a series of empty Tibetan-Chinese translation files

85
00:07:58,041 --> 00:08:03,302
Then we imported these two parts of data into our git repository hosted on GitHub

86
00:08:03,302 --> 00:08:07,713
Then we imported these two parts of data into our git repository hosted on GitHub

87
00:08:07,713 --> 00:08:13,782
and then exported a data table comparing Chinese and Tibetan through the git repository

88
00:08:13,782 --> 00:08:17,476
This data table was constructed at the beginning

89
00:08:17,476 --> 00:08:21,449
which is the stage0 part of the work I will talk about later

90
00:08:21,449 --> 00:08:24,894
After we export the comparison table

91
00:08:24,894 --> 00:08:35,025
our translator will translate this part of the comparison table to get a translated comparison table

92
00:08:35,025 --> 00:08:37,214
our translator will translate this part of the comparison table to get a translated comparison table

93
00:08:37,214 --> 00:08:42,103
and then we will import it into our git warehouse simultaneously

94
00:08:42,103 --> 00:08:49,306
Then we also built a translation database based on this git repository

95
00:08:49,306 --> 00:08:51,609
This translation database is on localhost

96
00:08:51,609 --> 00:08:59,934
 Then this translation database is mainly to provide a translated word match with itself.

97
00:08:59,934 --> 00:09:04,362
We will give a brief introduction to this word self-match later in stage1

98
00:09:04,362 --> 00:09:11,554
The same git repository and our Weblate platform provide a bidirectional synchronization support

99
00:09:11,554 --> 00:09:17,505
The Weblate platform mainly provides a front-end interface editing support for translation

100
00:09:17,505 --> 00:09:26,134
Then our git repository can generate our Tibetan language packages

101
00:09:26,134 --> 00:09:29,013
which are the three language packs we just mentioned earlier

102
00:09:29,013 --> 00:09:33,447
This part of the work can also be build automatically

103
00:09:33,447 --> 00:09:43,880
Regarding stage0, we mainly describe the situation in the early stage of Tibetan-Chinese localization

104
00:09:43,880 --> 00:09:50,334
Although in the 2020 generation, ubuntu

105
00:09:50,334 --> 00:09:51,971
 is a relatively popular release distro

106
00:09:51,971 --> 00:09:55,516
But one of its development processes is for the university faculty and students who have just started to contribute to Ubuntu

107
00:09:55,516 --> 00:10:00,388
It is said that there is a certain threshold

108
00:10:00,388 --> 00:10:06,874
so at the beginning, we did not use ubuntu's development platforms like launchpad

109
00:10:06,874 --> 00:10:11,817
and some of its patches and dpkg tools

110
00:10:11,817 --> 00:10:19,245
At the beginning, I exported all the translated documents in the system into an Excel table for Chinese and English comparison

111
00:10:19,245 --> 00:10:21,529
which is the comparison table we just mentioned

112
00:10:21,529 --> 00:10:27,039
this table is mainly used so that people who are not familiar with the development tools of Ubuntu

113
00:10:27,039 --> 00:10:30,427
can participate in the translation contribution as simply as possible

114
00:10:30,427 --> 00:10:37,537
one of the main reasons why we did not use launchpad for translation work

115
00:10:37,537 --> 00:10:40,076
was that it did not have a good Chinese interface support

116
00:10:40,076 --> 00:10:43,419
and its interoperability was somewhat cumbersome

117
00:10:43,419 --> 00:10:47,844
At that time we had not deployed our own Weblate service

118
00:10:47,844 --> 00:10:51,481
so we used the git repository

119
00:10:51,481 --> 00:10:55,570
and then exported the excel table to manage our translation data

120
00:10:55,570 --> 00:10:59,701
There are about 30,000 translation data managed in this way

121
00:10:59,701 --> 00:11:04,329
Our repositories are located on GitHub

122
00:11:04,329 --> 00:11:14,328
and your can check our latest status in our GitHub repositories.

123
00:11:14,328 --> 00:11:26,071
Here, one is on 16.04, and the other is on the hosting status of the translated files on 20.04

124
00:11:26,071 --> 00:11:36,545
Then in the stage 1, we deployed our own self-hosted Weblate service

125
00:11:36,545 --> 00:11:42,114
better synchronization with the repositories and an online translation service database

126
00:11:42,114 --> 00:11:46,605
At this stage, we have built a local translation database

127
00:11:46,605 --> 00:11:49,876
mainly for the convenience of storing all translated entries

128
00:11:49,876 --> 00:11:55,230
On the basis of these translations, methods like Levenshtein

129
00:11:55,230 --> 00:11:59,743
are used to make a vague match for the approximate translation based on the editing distance

130
00:11:59,743 --> 00:12:03,155
Then in this way, we roughly added 10,000 translations

131
00:12:03,155 --> 00:12:07,174
Of course, this part of the translation still needs manual review

132
00:12:07,174 --> 00:12:14,404
Then I have a copy of the translation database locally

133
00:12:14,404 --> 00:12:19,754
We can see that there are a total of 172,369 pieces of data

134
00:12:19,754 --> 00:12:25,493
The amount of translated data in Tibetan is probably more than 40%

135
00:12:25,493 --> 00:12:32,135
.It is a very large amount

136
00:12:32,135 --> 00:12:35,419
and you can see the translation of it in Tibetan-Chinese

137
00:12:35,419 --> 00:12:42,912
Then the fuzzy match we just said is

138
00:12:42,912 --> 00:12:47,168
 an improved method based on Levenshtein

139
00:12:47,168 --> 00:12:50,956
It is different from the edit distance comparison of character strings

140
00:12:50,956 --> 00:12:55,391
 I myself call it the edit distance comparison based on Tibetan-Chinese syllables

141
00:12:55,391 --> 00:12:58,508
The Tibetan-Chinese syllable here contains basic characters

142
00:12:58,508 --> 00:13:02,239
powel, upper-added character, lower-added character, pre-added character, post-added character

143
00:13:02,239 --> 00:13:05,788
A component part is a character

144
00:13:05,788 --> 00:13:10,621
Then the words of one syllable are composed of seven characters at most

145
00:13:10,621 --> 00:13:13,378
and the least words are composed of three to four characters

146
00:13:13,378 --> 00:13:19,327
By changing a character-based approach to a syllable-based approach

147
00:13:19,327 --> 00:13:26,198
we can filter out some interference from editing operations that have nothing to do with syllables

148
00:13:26,198 --> 00:13:42,014
here is an explanation and support for the Tibetan-Chinese syllables

149
00:13:42,014 --> 00:13:48,378
 I would like to thank again for the theoretical support provided by Professor ཉི་མ་བཀྲ་ཤིས།  of Tibet University

150
00:13:48,378 --> 00:13:58,800
The editing method of the Tibetan-Chinese syllables here is derived from a theoretical method of Tibetan-Chinese sorting

151
00:13:58,800 --> 00:14:08,983
 and then a series of finite-state machine is realized through his method

152
00:14:08,983 --> 00:14:12,558
 and then a simple parse of these things is carried out

153
00:14:12,558 --> 00:14:21,599
Then in the stage 2, we started to use the Weblate platform to carry out an open source co-translation

154
00:14:21,599 --> 00:14:25,394
and then at the same time build our language packages

155
00:14:25,394 --> 00:14:33,278
Although we are talking about using an open source collaborative model,

156
00:14:33,278 --> 00:14:38,620
our collaborative development is not distributed globally

157
00:14:38,620 --> 00:14:46,827
Although it is not distributed all over the globe, it also spans thousands of kilometers and then connects every member of our team

158
00:14:46,827 --> 00:14:51,838
Then you can visit our Weblate service at this website

159
00:14:51,838 --> 00:14:58,550
From here, you can see that the proportion of Tibetan translation is 41%,

160
00:14:58,550 --> 00:15:00,733
and then there are nearly 88,000 entries that are not translated

161
00:15:00,733 --> 00:15:05,071
There are probably more than 500 components for all the components,

162
00:15:05,071 --> 00:15:10,409
and more than 500 components cover most of the applications in the system

163
00:15:10,409 --> 00:15:12,035
most of the key components,

164
00:15:12,035 --> 00:15:20,258
like libc, glib and some applications of GNOME.

165
00:15:20,258 --> 00:15:30,524
I installed an Ubuntu Kylin system integrated with the Tibetan-Chinese language package in my local machine

166
00:15:30,524 --> 00:15:33,198
It was installed through QEMU

167
00:15:33,198 --> 00:15:40,359
Let's take a look at the following

168
00:15:40,359 --> 00:15:54,001
Here are just an installed system of Ubuntu Kylin 20.04

169
00:15:54,001 --> 00:15:59,507
In fact, we have implemented a translation support for most of the applications, mainly applications of UKUI

170
00:15:59,507 --> 00:16:03,922
and some GTK applications

171
00:16:03,922 --> 00:16:16,659
Here we can use the UKUI control center to switch the language status of the current system

172
00:16:16,659 --> 00:16:22,212
Like the words here, it provides a large number of Tibetan-Chinese language support

173
00:16:22,212 --> 00:16:24,412
For the words here, we set Tibetan-Chinese

174
00:16:24,412 --> 00:16:28,278
 as the first supported language in this environment

175
00:16:28,278 --> 00:16:32,501
and then the second supported language is Chinese, followed by English

176
00:16:32,501 --> 00:16:39,360
when it comes to UKUI's control center

177
00:16:39,360 --> 00:16:43,169
most of the translation of the control center has been almost completed

178
00:16:43,169 --> 00:16:47,830
 Although there are still some remaining unsupported parts

179
00:16:47,830 --> 00:16:53,638
the relative usability has already been prepared

180
00:16:53,638 --> 00:16:55,569
The translation of the setting interface is fully covered

181
00:16:55,569 --> 00:17:02,007
Then, like some traditional gtk applications, such as Mate Terminal

182
00:17:02,007 --> 00:17:05,137
 there is also a complete Tibetan-Chinese language support

183
00:17:05,137 --> 00:17:09,860
Then, when we open the terminal, we can briefly introduce

184
00:17:09,860 --> 00:17:14,222
 the Tibetan-Chinese translation support of some cli programs

185
00:17:14,222 --> 00:17:16,406
such as the commonly used sudo

186
00:17:16,406 --> 00:17:21,599
and the Tibetan-Chinese localization support on the password prompt

187
00:17:21,599 --> 00:17:29,974
There are also some common commands like ls and df that also have some Tibetan-Chinese support

188
00:17:29,974 --> 00:17:31,859
 but they are not completely covered

189
00:17:31,859 --> 00:17:42,587
Then, in the next words, you can take a look at UKUI's default file manager

190
00:17:42,587 --> 00:17:46,055
and then there is also a nice support for Tibetan-Chinese

191
00:17:46,055 --> 00:17:53,284
including support for some setting options and view settings. 

192
00:17:53,284 --> 00:17:59,320
Then there is some support like tag

193
00:17:59,320 --> 00:18:09,915
And for GTK applications, in fact, like pluma

194
00:18:09,915 --> 00:18:18,121
and Print Setting all have a complete Tibetan-Chinese language support.

195
00:18:18,121 --> 00:18:23,492
Because this part of the function is the most commonly used function in daily life

196
00:18:23,492 --> 00:18:26,541
so we also give priority to a localization support

197
00:18:26,541 --> 00:18:31,732
There are also games like minesweeper, 

198
00:18:31,732 --> 00:18:35,550
and GTK games also have some simple Tibetan-Chinese support

199
00:18:35,550 --> 00:18:44,448
And in addition to this, it is worth mentioning that GIMP

200
00:18:44,448 --> 00:18:48,418
has also completed a highly completed Tibetan-Chinese translation support.

201
00:18:48,418 --> 00:19:01,558
basically covering all the options like Tooltips and some options in the menu bar.

202
00:19:01,558 --> 00:19:08,961
In addition to these commonly used GTK applications

203
00:19:08,961 --> 00:19:16,657
we have also done a complete Tibetan-Chinese support for the applications in the entire UKUI desktop environment

204
00:19:16,657 --> 00:19:21,237
For example, the tools we use daily, such as calculator

205
00:19:21,237 --> 00:19:25,362
 also have a preliminary Tibetan-Chinese language support

206
00:19:25,362 --> 00:19:31,789
There is also UKUI Search, and UKUI video player

207
00:19:31,789 --> 00:19:41,199
 Here, the video player also has a localization support for the Tibetan-Chinese language on some settings

208
00:19:46,289 --> 00:19:51,627
In this case, the degree of completion of translation is still relatively high

209
00:19:53,117 --> 00:20:04,449
There is also a tool for hardware machine inspection provided by Ubuntu Kylin

210
00:20:04,449 --> 00:20:06,906
It is Youker Assistanter

211
00:20:06,906 --> 00:20:12,358
We have also done a lot of translation work on some of its hardware info

212
00:20:21,048 --> 00:20:32,381
there is something worth mentioning here is the support of a Tibetan-Chinese input method we cooperated with Sogou

213
00:20:32,381 --> 00:20:38,838
we provides a new Tibetan-Chinese input method.

214
00:20:38,838 --> 00:20:43,425
The features include automatic association of syllables

215
00:20:43,425 --> 00:20:49,030
and quick spelling of words

216
00:20:49,030 --> 00:20:51,424
, etc 

217
00:20:51,424 --> 00:20:57,830
here are very grateful to Sogou for its support of promoting the localization of Ubuntu Kylin in Tibetan-Chinese

218
00:20:57,830 --> 00:21:11,142
Then, a demonstration demo about the degree of support for Tibetan translation on Ukylin 20.04 will probably end here

219
00:21:20,450 --> 00:21:25,135
If we follow up, I will introduce a plan for everyone to follow

220
00:21:25,135 --> 00:21:29,708
Even though we have already had a good start in ubuntu as localization

221
00:21:29,708 --> 00:21:32,811
there is still a lot of work we need to do in the future

222
00:21:32,811 --> 00:21:43,424
We plan to further translate the translation of all entries in the entire Ubuntu

223
00:21:43,424 --> 00:21:47,612
and then go to translate for more untranslated data

224
00:21:47,612 --> 00:21:54,878
Then the second part is to promote a complete and pure open source of our project.

225
00:21:54,878 --> 00:22:05,062
Because at the moment we can see that the protocol used in the git repository is still a proprietary license

226
00:22:05,062 --> 00:22:10,126
Because we have not obtained a single authorization from all the translators involved

227
00:22:10,126 --> 00:22:19,748
 we are gradually pushing all the translators in to confirm their translation status

228
00:22:19,748 --> 00:22:27,101
Then this part is the open source that we want to promote this project

229
00:22:27,101 --> 00:22:33,887
 Then one step further is to provide localized support for other ethnic minority languages in China

230
00:22:33,887 --> 00:22:40,355
Like the words in our plan, there is support for localization of some minority languages in Manchu-Chinese language, Mongolian-Chinese language, Uyghur-Chinese language, and Zhuang-Chinese Language

231
00:22:40,355 --> 00:22:43,183
Like the words in our plan, there is support for localization of some minority languages in Manchu-Chinese language, Mongolian-Chinese language, Uyghur-Chinese language, and Zhuang-Chinese Language

232
00:22:43,183 --> 00:22:55,732
thank you all for watching

233
00:22:55,732 --> 00:23:04,148
In the end, I would like to thank again Professor ཉི་མ་བཀྲ་ཤིས། , Professor རིག་འཛིན་རྡོ་རྗེ། , Professor བསོད་ནམས་རྒྱ་མཚོ། 

234
00:23:04,148 --> 00:23:07,986
and Mr. འཇམ་དབྱངས་རྒྱལ། , Mr. བསམ་འཕེལ་ཚེ་རིང་། 

235
00:23:07,986 --> 00:23:13,264
for their great help in our Tibetan-Chinese localization work

236
00:23:13,264 --> 00:23:18,266
Thank you all, bye

