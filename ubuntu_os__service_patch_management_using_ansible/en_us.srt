1
00:00:00,200 --> 00:00:04,200

2
00:00:07,200 --> 00:00:14,700
Hello, I will explain about Ubuntu Operating System and Service Patch Management using Ansible.

3
00:00:14,700 --> 00:00:18,500
Before we go to the material, I will introduce myself. I am Doni Kuswara,

4
00:00:18,500 --> 00:00:21,400
an Ubuntu user and technology enthusiast.

5
00:00:21,400 --> 00:00:25,900
I am currently working at PT Biznet Gio Nusantara as a

6
00:00:25,900 --> 00:00:31,000
Product Operations Engineer since June 2020. If you need me,

7
00:00:31,000 --> 00:00:34,100
You can contact me at the following social media.

8
00:00:35,800 --> 00:00:40,100
I am also the owner and writer of maringulik.com website.

9
00:00:40,100 --> 00:00:43,300
This website has several tutorial

10
00:00:43,300 --> 00:00:46,900
from Linux configuration to cloud configuration.

11
00:00:48,700 --> 00:00:52,000
Then we'll go to the topic, what we will discuss

12
00:00:52,000 --> 00:00:55,800
today. First, there will be an introduction

13
00:00:55,800 --> 00:00:56,800
to Patch Management.

14
00:00:56,800 --> 00:00:59,100
What is Patch Management?

15
00:00:59,100 --> 00:01:02,100
Why is Patch Management important? Why we have to use automation?

16
00:01:02,100 --> 00:01:06,600
Why we choose Ansible for Patch Management?

17
00:01:06,600 --> 00:01:10,200
How to do Ubuntu patching manually?

18
00:01:10,200 --> 00:01:14,700
And the last, we will do some demonstrations about how

19
00:01:14,700 --> 00:01:18,900
to configure OS & Patch Management using Ansible.

20
00:01:18,900 --> 00:01:25,500
Introduction to Patch Management. 

21
00:01:25,500 --> 00:01:28,700
System Administrator is responsible to do operating system patching.

22
00:01:28,700 --> 00:01:32,900
And to patch one server, system administrator needs to 

23
00:01:32,900 --> 00:01:36,800
identify that the update is available, then

24
00:01:36,800 --> 00:01:41,000
if it is available, it will be downloaded and the update will be installed.

25
00:01:41,000 --> 00:01:43,800
In the wider environment, in example

26
00:01:43,800 --> 00:01:48,500
in the corporate environment, a company may have

27
00:01:48,600 --> 00:01:52,600
more than one server, there may be tens or hundreds of servers that

28
00:01:52,600 --> 00:01:55,400
need some update, so the update and upgrade activities

29
00:01:55,400 --> 00:01:58,800
will take time, and maybe there will be something wrong

30
00:01:58,800 --> 00:02:02,200
in the patching process, so it will make

31
00:02:02,200 --> 00:02:05,000
your Ubuntu operating system failed to boot.

32
00:02:05,000 --> 00:02:09,400
So, we need an automation to make our patching activities

33
00:02:09,400 --> 00:02:13,200
become more effective and efficient.

34
00:02:13,200 --> 00:02:16,800
So what is Patch Management? System administrator needs to

35
00:02:16,800 --> 00:02:19,200
understand the importance of patching in the operating system.

36
00:02:19,200 --> 00:02:22,300
System administrator can easily

37
00:02:22,300 --> 00:02:26,500
update and upgrade the system manually, but if the tasks can be

38
00:02:26,500 --> 00:02:29,100
done automatically, it certainly will

39
00:02:29,100 --> 00:02:32,200
make our life easier and mistake can be avoided.

40
00:02:32,200 --> 00:02:36,200
With patch management, system administrator can

41
00:02:36,200 --> 00:02:39,200
update/upgrade Ubuntu simultaneously

42
00:02:39,200 --> 00:02:42,500
and centered, even we can give additional parameters

43
00:02:42,500 --> 00:02:46,900
such as only update specific package,

44
00:02:48,600 --> 00:02:53,600
or not patching on operating systems that have

45
00:02:53,600 --> 00:02:56,600
critical services currently running. 

46
00:02:56,600 --> 00:03:01,300
We can specify the critical services, in example Nginx application that still running,

47
00:03:01,300 --> 00:03:03,700
or database applications such as MySQL,

48
00:03:03,700 --> 00:03:06,100
PostgreSQL or MariaDB that is currently running,

49
00:03:06,100 --> 00:03:09,100
then the server will not be patched.

50
00:03:10,400 --> 00:03:16,000
Why patch management is so important? Public server that

51
00:03:16,000 --> 00:03:19,100
not yet being patched will become a critical issue

52
00:03:19,100 --> 00:03:22,400
towards cyber security. But cyber security is not 

53
00:03:22,400 --> 00:03:25,400
the only reason to update or upgrade Ubuntu.

54
00:03:25,400 --> 00:03:30,900
Server patching can also fix some issues

55
00:03:30,900 --> 00:03:35,900
such as driver repair or to improve performance

56
00:03:35,900 --> 00:03:39,100
of the server when there is no 

57
00:03:39,100 --> 00:03:44,000
service issue in that particular server.

58
00:03:44,000 --> 00:03:46,700
The longer the system administrator delays updating and upgrading,

59
00:03:46,700 --> 00:03:50,100
the list of packages that need to be patched will be longer.

60
00:03:50,100 --> 00:03:54,100
This problem will increase the time 

61
00:03:54,100 --> 00:03:56,200
needed to fully patch 

62
00:03:56,200 --> 00:03:59,200
Ubuntu system.

63
00:03:59,200 --> 00:04:03,000
Why we need to perform automation?

64
00:04:03,000 --> 00:04:07,500
Here we have simple illustration that administrator have an

65
00:04:07,500 --> 00:04:10,200
Administrator Note,

66
00:04:10,400 --> 00:04:14,000
in that administrator note, we have service check

67
00:04:14,000 --> 00:04:14,800
like I have mentioned before,

68
00:04:14,800 --> 00:04:18,200
verification wether the critical services

69
00:04:18,200 --> 00:04:21,700
are currently running or not, check available update, check apt update,

70
00:04:21,700 --> 00:04:23,700
check list upgradeable,

71
00:04:23,700 --> 00:04:27,800
then perform full upgrade or specific package upgrade only,

72
00:04:27,800 --> 00:04:32,700
then check if reboot is required, or after that

73
00:04:32,700 --> 00:04:35,800
perform reboot if the system needs reboot,

74
00:04:35,800 --> 00:04:39,000
after booting is finished, we need to perform verification again.

75
00:04:39,000 --> 00:04:43,700
This note is just for one server.

76
00:04:43,700 --> 00:04:48,600
And what about if there are tens or hundreds of servers?

77
00:04:48,600 --> 00:04:52,500
Of course, it will not make sense to do these tasks manually.

78
00:04:52,500 --> 00:04:56,300
If you search for patch management tools in Google,

79
00:04:56,300 --> 00:05:00,000
many articles will recommend

80
00:05:00,000 --> 00:05:04,500
some tools like ManageEngine Patch Manager, or Automox.

81
00:05:04,500 --> 00:05:10,400
However, from the various recommendations suggested from many articles,

82
00:05:10,400 --> 00:05:13,500
These are paid tools and require an agent that needs to be installed

83
00:05:13,500 --> 00:05:16,600
to every hosts that we will patch later.

84
00:05:16,600 --> 00:05:21,000
So what about Ansible and why we must

85
00:05:21,000 --> 00:05:25,900
choose Ansible as patch manager tool?

86
00:05:25,900 --> 00:05:28,200
Ansible is one of the automation tools that does not require an agent

87
00:05:28,200 --> 00:05:31,400
because Ansible manages nodes with SSH connections.

88
00:05:31,400 --> 00:05:35,000
Ansible only needs one server as

89
00:05:35,000 --> 00:05:38,400
control node to push commands to each node

90
00:05:38,400 --> 00:05:41,700
in inventory. Ansible is easier and

91
00:05:41,700 --> 00:05:44,400
more practical compared to other management tools

92
00:05:44,400 --> 00:05:47,800
like maybe puppet, because it doesn't need an agent on every node,

93
00:05:47,800 --> 00:05:52,400
only use SSH connection only.

94
00:05:52,400 --> 00:05:56,000
Before we do automation we need to understand first

95
00:05:56,000 --> 00:06:00,500
the manual method for patching Ubuntu, usually

96
00:06:00,500 --> 00:06:04,200
you did an apt update. Apt update works

97
00:06:04,200 --> 00:06:12,400
to update the source package list to get the latest list of available packages in the repository.

98
00:06:12,400 --> 00:06:14,600
This command is used to get

99
00:06:14,600 --> 00:06:17,900
information about new version of packages or their dependencies.

100
00:06:17,900 --> 00:06:22,100
But apt update won't install or

101
00:06:22,100 --> 00:06:26,100
upgrade any package. After performing apt update,

102
00:06:26,100 --> 00:06:30,400
then we do apt upgrade that is used to

103
00:06:30,400 --> 00:06:33,200
install any upgrade available to all of the packages

104
00:06:33,200 --> 00:06:36,100
that have been installed on our Ubuntu operating system

105
00:06:36,100 --> 00:06:39,500
through sources.list file. New packages will be installed

106
00:06:39,500 --> 00:06:42,700
if needed to satisfy dependencies, but

107
00:06:42,700 --> 00:06:46,800
the already installed packages will not be uninstalled. To know

108
00:06:46,800 --> 00:06:50,500
which packages that need upgrade, you can use

109
00:06:50,500 --> 00:06:55,100
apt list --upgradeable command. Here you can see

110
00:06:55,100 --> 00:06:59,500
the video example, here there are so many packages that need

111
00:06:59,500 --> 00:07:03,300
upgrade or the upgrade is readily available.

112
00:07:03,300 --> 00:07:10,800
If you scroll upward, of course there will be so many packages and apt upgrade command will upgrade all

113
00:07:10,300 --> 00:07:14,400
or specific packages that you already determined, which are

114
00:07:14,400 --> 00:07:17,800
the upgrades readily available. Here I use

115
00:07:17,800 --> 00:07:22,300
6 servers, the first server is being used as an Ansible control node and

116
00:07:22,300 --> 00:07:27,500
the other 5 servers are divided to 2 host groups: host group A and host group B.

117
00:07:27,500 --> 00:07:32,700
Host group A contains servers running web server applications,

118
00:07:32,700 --> 00:07:38,400
and host group B contains servers

119
00:07:38,400 --> 00:07:42,200
running database applications. We will also learn about

120
00:07:42,200 --> 00:07:44,900
Playbook and Inventory, and some other terms

121
00:07:44,900 --> 00:07:49,000
used in Ansible.

122
00:07:49,000 --> 00:07:52,000
For example, the control node, that is the server where Ansible is installed,

123
00:07:52,000 --> 00:07:54,800
managed node, which is all infrastructure controlled

124
00:07:54,800 --> 00:07:58,800
by control node, then inventory, which is the list of managed nodes,

125
00:07:58,800 --> 00:08:01,700
and playbook, which is the list of command that is written

126
00:08:01,700 --> 00:08:04,700
in YAML format. Because Ansible is agentless,

127
00:08:04,700 --> 00:08:11,000
you just have to configure Ansible at control node only.

128
00:08:11,000 --> 00:08:17,200
Then how to use Ansible for patching Ubuntu & Service Patch Management?

129
00:08:17,200 --> 00:08:23,500
Here to install Ansible, it is

130
00:08:23,500 --> 00:08:26,300
very simple, you just need to use this command: apt install ansible,

131
00:08:26,300 --> 00:08:31,800
then after Ansible is installed, you need to configure the inventory.

132
00:08:31,800 --> 00:08:34,900
Inventory is a file that contains

133
00:08:34,900 --> 00:08:37,900
hosts information that will be managed by control node.

134
00:08:37,900 --> 00:08:41,400
You can include one to hundreds of servers

135
00:08:41,400 --> 00:08:47,300
to that inventory file. By default, Ansible inventory file

136
00:08:47,300 --> 00:08:51,500
is located at /etc/ansible/hosts.

137
00:08:51,500 --> 00:08:55,500
Here you can see the example, there are

138
00:08:55,500 --> 00:09:03,000
web-1, web-2, web-3, then db-1, db-2. Web-1 to 3 are put into

139
00:09:03,000 --> 00:09:10,000
web server group, and db-1 and db-2 are put into database server group.

140
00:09:10,600 --> 00:09:13,800
You can declare some additional parameters,

141
00:09:13,800 --> 00:09:18,000
for example username and password of the server,

142
00:09:18,000 --> 00:09:22,600
or maybe SSH custom port of the controlled server

143
00:09:22,600 --> 00:09:25,900
if the controlled server doesn't use

144
00:09:25,900 --> 00:09:29,000
SSH default port, which is port 22. 

145
00:09:29,000 --> 00:09:32,700
In addition, for controlled hosts you can call using

146
00:09:32,700 --> 00:09:35,800
hostname or IP address. If you want to use hostname,

147
00:09:35,800 --> 00:09:38,500
in this example is for the application of web-2 up to db-2

148
00:09:38,500 --> 00:09:42,400
we need to make sure that these hosts are

149
00:09:42,400 --> 00:09:46,400
resolved from control node. To test the resolve is simple,

150
00:09:46,400 --> 00:09:50,500
you just need to ping each hostname.

151
00:09:50,500 --> 00:09:55,100
Here we also have an example video that I use

152
00:09:55,100 --> 00:09:59,700
ssh-copy-id first so that later the control node

153
00:09:59,700 --> 00:10:03,100
can easily access any hosts that become

154
00:10:03,100 --> 00:10:08,000
managed node. In this video I give an example that the public key

155
00:10:08,900 --> 00:10:13,500
in the control node is copied to each host that is a managed node

156
00:10:13,500 --> 00:10:16,700
later, so to access SSH later, we don't have to

157
00:10:16,700 --> 00:10:20,600
input any password anymore. After configuring inventory,

158
00:10:20,600 --> 00:10:24,900
let's configure the playbook. Ansible playbook

159
00:10:24,900 --> 00:10:27,800
offers simple configuration management that

160
00:10:27,800 --> 00:10:31,800
can be repeated, can be reused, and multi machine application

161
00:10:31,800 --> 00:10:34,400
that is very suitable for use in complex application.

162
00:10:34,400 --> 00:10:37,000
The playbook is written in a very simple language

163
00:10:37,000 --> 00:10:40,200
which is YAML language, so that we

164
00:10:40,200 --> 00:10:44,500
will not get any difficulties to learn this new language, because

165
00:10:44,500 --> 00:10:47,700
YAML is also being used to configure

166
00:10:47,700 --> 00:10:52,500
Kubernetes, Istio, Service Mesh, or Docker Compose.

167
00:10:53,900 --> 00:11:01,800
Here you can see there are tasks from Task 1 to Task 7.

168
00:11:01,100 --> 00:11:05,300
I give each task a name so it's easy to understand

169
00:11:05,300 --> 00:11:08,700
and of course when the administrator is running this

170
00:11:08,700 --> 00:11:11,400
playbook, he/she won't be confused

171
00:11:11,400 --> 00:11:16,500
what process is Ansible running. So we need to declare

172
00:11:16,500 --> 00:11:20,300
each name on every tasks. In the first task,

173
00:11:20,300 --> 00:11:24,100
verify web/database processes are not running. This task will verify

174
00:11:24,100 --> 00:11:28,400
whether the status of the webserver or database is currently running

175
00:11:28,400 --> 00:11:31,500
or not in each host that will be patched.

176
00:11:31,500 --> 00:11:36,500
In the second task, What is web/database process are running on the server.

177
00:11:36,500 --> 00:11:39,700
The next task will be cancelled in host with

178
00:11:39,700 --> 00:11:43,000
the status of the web server and database currently running. In the third task

179
00:11:43,000 --> 00:11:47,300
update kernel package. This task will start to upgrade

180
00:11:47,300 --> 00:11:50,600
Ubuntu server where applications that we have determined above

181
00:11:50,600 --> 00:11:58,900
which are Nginx, MySQL, Apache, MariaDB or Postgre not currently running, then it will

182
00:11:58,900 --> 00:12:06,000
continue to third task. Here are also some parameters or modules that I created. 

183
00:12:06,000 --> 00:12:10,200
In the 4th task, it will check whether reboot is needed

184
00:12:10,200 --> 00:12:13,200
after upgrading the kernel on Ubuntu.

185
00:12:13,200 --> 00:12:17,200
This task will check reboot requirement on Ubuntu

186
00:12:17,200 --> 00:12:22,200
after updating the kernel by verifying the presence of /var/run/reboot-required file.

187
00:12:22,200 --> 00:12:25,600
We can save the output of stat module that we'll use

188
00:12:25,600 --> 00:12:29,000
to decide whether we have to reboot the server later.

189
00:12:29,000 --> 00:12:33,200
In the 5th task, reboot Ubuntu system if kernel has been updated

190
00:12:33,200 --> 00:12:36,000
or reboot is needed. This task will instruct

191
00:12:36,000 --> 00:12:39,600
Ansible to reboot Ubuntu system if kernel

192
00:12:39,600 --> 00:12:42,900
has been updated and reboot is needed. In this task,

193
00:12:42,900 --> 00:12:45,900
we use Ansible reboot module to start reboot process.

194
00:12:47,900 --> 00:12:53,700
In the 6th task, we do 180 seconds pause.

195
00:12:53,700 --> 00:12:57,900
This task will wait for 3 minutes so that the server

196
00:12:57,900 --> 00:13:01,900
is running after reboot. Here we use Ansible pause module.

197
00:13:02,900 --> 00:13:06,600
This will pause playbook execution for a specified time

198
00:13:06,600 --> 00:13:11,700
or until a prompt is acknowledged. Here you can configure  

199
00:13:11,700 --> 00:13:17,800
as needed, you can adjust based on how long the reboot process usually takes.

200
00:13:17,800 --> 00:13:22,100
We also set so that we can use

201
00:13:22,100 --> 00:13:27,700
Ctrl-c + c to continue without wait until

202
00:13:27,700 --> 00:13:31,400
the pause is finished, which is 3 minutes, or use

203
00:13:31,400 --> 00:13:35,800
Ctrl-c + a to abort or stop task

204
00:13:35,800 --> 00:13:40,600
until 6th task only. Then the last task is task 7, 

205
00:13:40,600 --> 00:13:43,800
check whether all systems are responding to SSH. This task will ensure

206
00:13:43,800 --> 00:13:47,300
that after 3 minutes, the system can be accessed again

207
00:13:47,300 --> 00:13:50,700
through SSH. Here we use local action module.

208
00:13:50,700 --> 00:13:53,900
When we use this module, Ansible will

209
00:13:53,900 --> 00:13:56,400
run module that is mentioned below at the

210
00:13:56,400 --> 00:14:01,200
node controller. The module here is wait for. 

211
00:14:01,800 --> 00:14:06,900
After we configure starting from the inventory and then we have compiled the playbook,

212
00:14:06,900 --> 00:14:10,900
we run the playbook in the following demo video.

213
00:14:10,900 --> 00:14:13,800
Before we run the playbook, we verify first

214
00:14:13,800 --> 00:14:19,000
starting from the kernel version of each server or

215
00:14:19,000 --> 00:14:22,300
uptime of each server which later we will do patching.

216
00:14:23,900 --> 00:14:29,900
Here we can see for the kernel versions

217
00:14:29,900 --> 00:14:37,500
starting from web-2, web-1, db-2, db-1, web-3 the latest kernel version

218
00:14:37,500 --> 00:14:42,200
is used in db-2 server. Then for the uptime

219
00:14:42,200 --> 00:14:48,300
we can see here web-2, db-2, db-1, web-3 dan db-1.

220
00:14:48,300 --> 00:14:54,900
We verify this uptime to find out whether

221
00:14:54,900 --> 00:14:57,200
the server will reboot or not even though

222
00:14:57,200 --> 00:15:01,800
in the task we can see it too. But here we will

223
00:15:01,800 --> 00:15:04,100
verify whether or not to reboot.

224
00:15:04,100 --> 00:15:08,400
We also verify the Nginx service

225
00:15:08,400 --> 00:15:12,100
or web server service. Here we can see that

226
00:15:12,100 --> 00:15:46,600
in web-3, the Nginx service is running, and we also verify the database service.

227
00:15:56,100 --> 00:16:02,200
Here it is monitored for MySQL status, in db-2 the status is active,

228
00:16:02,200 --> 00:16:08,800
it means in web-3 the Nginx status is active and in db-2

229
00:16:08,800 --> 00:16:15,200
MySQL status is active, and web-1, web-2 and db-1 can start patching process.

230
00:16:17,400 --> 00:16:20,400
To run the playbook, you can type

231
00:16:20,400 --> 00:16:25,000
sudo ansible-playbook update.yml

232
00:16:25,000 --> 00:16:31,500
Update.yml is a YAML file that we have configured for patching and I named it update.yml.

233
00:16:32,400 --> 00:16:37,000
In each task it is already running,

234
00:16:37,000 --> 00:16:42,300
Task 1 and Task 2 show error for web-3 and db-2

235
00:16:42,300 --> 00:16:47,600
which we have detailed earlier that the status

236
00:16:47,600 --> 00:16:51,100
of web server or database is running on 

237
00:16:51,100 --> 00:16:54,900
both servers. So later in the third task

238
00:16:54,900 --> 00:17:00,300
there will be no update or upgrade for

239
00:17:00,300 --> 00:17:04,500
web-2 and db-2, because the status of

240
00:17:04,500 --> 00:17:09,400
critical service is running. In the third task, we need more time

241
00:17:09,400 --> 00:17:14,500
because here is where the update/upgrade process runs.

242
00:17:14,500 --> 00:17:17,300
This update/upgrade process is certainly

243
00:17:17,300 --> 00:17:20,400
will download the packages from the sources and install them.

244
00:17:20,400 --> 00:17:23,900
Here we cut the video, later we can see

245
00:17:23,900 --> 00:17:26,500
to make time more efficient.

246
00:17:28,500 --> 00:17:45,700
After this third task, it will continue to the fourth task.

247
00:17:48,300 --> 00:17:57,100
In the fourth task, we can see web-2, web-1 and db-1 are

248
00:17:57,100 --> 00:18:02,200
performing reboot which web-3 and db-2 are excluded

249
00:18:02,200 --> 00:18:07,200
because they can't proceed to the patching process.

250
00:18:07,200 --> 00:18:28,300
We can see the result too, here db-1, web-1 and web-2 have "changed" status.

251
00:18:29,200 --> 00:18:40,200
web-3 has "failed" status, and so does db-2. 

252
00:18:40,200 --> 00:18:45,600
We try to stop the services that we have determined.

253
00:18:45,600 --> 00:18:50,000
We stop Nginx in web-3 and we also stop

254
00:18:50,000 --> 00:18:55,300
MySQL service in db-2. We see

255
00:18:55,300 --> 00:18:59,300
the uptime of each server that had been

256
00:18:59,300 --> 00:19:04,100
rebooted 4 minutes earlier for web-1, web-2 and db-1.

257
00:19:05,000 --> 00:19:10,400
After we stopped Nginx service in web-3

258
00:19:10,400 --> 00:19:14,900
and MySQL in db-2, we re-run the playbook.

259
00:19:14,900 --> 00:19:19,800
This means that later patching will be done on all servers,

260
00:19:19,800 --> 00:19:26,200
but for servers web-1, web-2 and db-1

261
00:19:26,200 --> 00:19:28,400
shouldn't be processed anymore because they

262
00:19:28,400 --> 00:19:32,500
have already using or there aren't any packages

263
00:19:32,500 --> 00:19:34,200
that need updating.

264
00:19:34,900 --> 00:19:40,700
We see on web-3 in the third task the status is "changed".

265
00:19:41,500 --> 00:19:55,700
in the fourth task we see if it needs to be rebooted and it turns out that only web-3 is rebooted.

266
00:19:57,200 --> 00:20:02,600
Why only web-3, why not db-2? Earlier, we saw

267
00:20:02,600 --> 00:20:08,000
that db-2 was already using the latest kernel version

268
00:20:08,000 --> 00:20:11,800
so it doesn't need any update

269
00:20:11,800 --> 00:20:15,100
or upgrade, because indeed there is

270
00:20:15,100 --> 00:20:22,000
no more update upgradeable list available. We can also

271
00:20:22,000 --> 00:20:25,600
verify the uptime once more, that web-3 has

272
00:20:25,600 --> 00:20:32,800
been rebooted and web-1, web-2 and db-1, db-2 don't get any reboot.

273
00:20:34,000 --> 00:20:38,000
Here the kernel status is also all updated

274
00:20:38,000 --> 00:20:43,600
for web-1, web-2, web-3, db-1 and db-2.

275
00:20:47,400 --> 00:20:52,300
That's if we do full patching.

276
00:20:52,300 --> 00:20:56,900
What if we want to patch only specific packages?

277
00:20:56,900 --> 00:20:59,900
Let's move on to the next demo.

278
00:21:01,500 --> 00:21:10,200
Here we will update the Nginx version.

279
00:21:10,200 --> 00:21:17,300
I added one server in my inventory which is app-1.

280
00:21:19,800 --> 00:21:35,200
I have also made the playbook, I took this playbook from the Ansible website, which is to update the Nginx version.

281
00:21:35,200 --> 00:21:38,400
Let's take a look first for the Nginx version

282
00:21:38,400 --> 00:21:46,200
that is currently running on app-1, namely Nginx with version 1.17.10

283
00:21:51,100 --> 00:21:55,900
Let's try to see also the playbook that has been made.

284
00:21:55,900 --> 00:21:59,800
You can get this playbook or copy it from the Ansible website.

285
00:22:02,100 --> 00:22:05,400
To run the playbook, the command is the same as the previous command,

286
00:22:05,400 --> 00:22:10,400
that is ansible-playbook the name of the playbook.

287
00:22:11,300 --> 00:22:15,200
Here we are waiting for the Nginx version update process

288
00:22:15,200 --> 00:22:18,100
shouldn't take long since it's just

289
00:22:18,100 --> 00:22:23,500
specific packages patching only.

290
00:22:31,900 --> 00:22:35,900
Now that the patching process has been finished,

291
00:22:35,900 --> 00:22:38,800
we see the Nginx version number

292
00:22:38,800 --> 00:22:43,500
after we have done our update,

293
00:22:43,500 --> 00:22:48,700
now the Nginx status is in version 1.18.0

294
00:22:48,700 --> 00:22:51,700
this means we just update Nginx only,

295
00:22:51,700 --> 00:22:56,400
without doing apt upgrade fully.

296
00:22:56,400 --> 00:22:59,800
In this material the instance that I created uses the resources

297
00:22:59,800 --> 00:23:03,100
in the NEO Virtual Compute service.

298
00:23:03,100 --> 00:23:06,500
With Ansible, you can easily push commands to any server

299
00:23:06,500 --> 00:23:09,300
as long as you can access the server via SSH.

300
00:23:09,300 --> 00:23:12,900
This is the end of my presentation. I am Doni Kuswara, 

301
00:23:12,900 --> 00:23:14,500
I hope we can meet on another occasion.

302
00:23:14,500 --> 00:23:15,600
Thank you.

