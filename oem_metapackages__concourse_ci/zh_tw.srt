1
00:00:07,013 --> 00:00:09,073
大家好 

2
00:00:09,073 --> 00:00:14,423
今天來跟大家介紹一下 OEM metapackages 跟 Concourse CI

3
00:00:15,219 --> 00:00:24,172
 這個投影片可以在下面這個網址看到

4
00:00:26,000 --> 00:00:27,629
首先我是誰

5
00:00:27,629 --> 00:00:36,817
 我是FourDollars，然後我是 Debian Developer、Ubuntu 跟 Gnome 的 Member

6
00:00:37,277 --> 00:00:41,334
呃 我也是 Canonical 的員工，然後也是 Vim 使用者

7
00:00:41,334 --> 00:00:47,097
我自己本身比較多使用的 social network 是 Plurk

8
00:00:48,000 --> 00:00:51,000
好 那我們來進入正題囉～

9
00:00:51,000 --> 00:00:54,000
什麼是 OEM metapackages 

10
00:00:54,000 --> 00:01:04,587
 在 Open Source 的新聞上面有這一篇文章

11
00:01:04,587 --> 00:01:11,760
然後在我們的 Ubuntu Mailing List 也有這個 Announce

12
00:01:12,282 --> 00:01:21,000
 那這個就是在介紹，我們 Canonical 有針對有 certified 過的 OEM 機器

13
00:01:21,000 --> 00:01:27,486
然後會有一些不一樣的 OEM certified 的 experience

14
00:01:28,000 --> 00:01:40,000
然後他的一些運作的細節會在這個 Mailing List 的文章裡面解釋

15
00:01:40,000 --> 00:01:42,608
 好

16
00:01:42,608 --> 00:01:46,000
那簡單來說就是

17
00:01:46,256 --> 00:01:52,585
 我們會對那個 platform

18
00:01:52,585 --> 00:01:56,178
Maybe 是一個 All-in-one 的 PC

19
00:01:56,178 --> 00:02:02,107
或者是一個 laptop 的電腦，或者是桌上型的電腦

20
00:02:02,107 --> 00:02:11,606
提供一個 OEM metapackage， 然後來使用我們所指定的 kernel

21
00:02:11,606 --> 00:02:15,567
 那大家可以看到下面這個圖

22
00:02:15,802 --> 00:02:21,603
我們在 Ubuntu 20.04 LTS 提供了兩種不同的 kernel

23
00:02:21,603 --> 00:02:28,172
那一個是 OEM kernel，然後另外一個是 generic 的 HWE kernel

24
00:02:28,446 --> 00:02:30,702
然後就是....

25
00:02:30,702 --> 00:02:35,861
我們 OEM metapackage 他主要會去使用上面這個 kernel

26
00:02:35,861 --> 00:02:37,960
那為什麼會去使用上面的 kernel？

27
00:02:37,960 --> 00:02:39,341
當然就是因為

28
00:02:39,341 --> 00:02:44,362
我們這些在 enable 的這些機器  

29
00:02:44,710 --> 00:02:52,057
他會是比較新的硬體，所以他會需要一些比較新的 kernel driver 來支援他

30
00:02:52,057 --> 00:02:56,726
 於是我們就設計出了這樣的方式

31
00:02:56,726 --> 00:03:01,097
就是我們同時會有兩個不一樣的 kernel  

32
00:03:01,097 --> 00:03:08,817
 OEM kernel 會使用比較新的 linux kernel 版本

33
00:03:09,138 --> 00:03:11,041
大概就是醬 

34
00:03:11,238 --> 00:03:17,723
 那這邊，下面這邊的 generic SWE 就會使用比較穩定的版本

35
00:03:17,723 --> 00:03:26,637
 然後大家也可以看到，這邊的切換就是 5.4 到某一個時間點之後，就會直接切換到比較新的 5.8

36
00:03:26,637 --> 00:03:35,522
 那在這個月剛好也是直接從 5.8 的 kernel 直接切換到 5.11

37
00:03:36,021 --> 00:03:38,316
他會有一個直接的轉換

38
00:03:38,316 --> 00:03:43,313
那  OEM kernel 這邊會不太 一樣的是：他會有一些重疊的時間

39
00:03:43,313 --> 00:03:49,055
像那個....Linux 5.6 的 kernel 他的時間就是

40
00:03:49,055 --> 00:03:56,860
你看，他跟下面這個 20.04b 的 OEM kernel，他有一些蠻長的重疊的時間

41
00:03:56,860 --> 00:04:02,674
一直到了這個大概是六月的時候，今年六月的時候

42
00:04:02,674 --> 00:04:08,000
他才從 5.6 整個轉換到 5.10

43
00:04:08,000 --> 00:04:15,175
同時我們在七月的時候，有一個新的 OEM kernel，他的 5.13 也就出現了

44
00:04:15,689 --> 00:04:23,859
那像這個 5.10 的這個 OEM kernel，他之後就會轉換到 5.13

45
00:04:24,334 --> 00:04:26,551
 大概就是這樣子

46
00:04:26,551 --> 00:04:31,000
那我們 OEM metapackage 主要就是說

47
00:04:31,000 --> 00:04:38,000
讓你去再早一點去安裝到這些 Linux OEM 的 kernel

48
00:04:38,000 --> 00:04:44,525
就是裝到比較新的 kernel，來支援 一些比較新的硬體

49
00:04:46,000 --> 00:04:49,000
那他是怎麼辦到的呢？

50
00:04:49,000 --> 00:04:53,332
他主要就是有兩點

51
00:04:53,332 --> 00:05:00,757
一個是：他使用 modaliases 去 match 這個硬體

52
00:05:01,021 --> 00:05:11,110
然後另外是：他會使用到 Ubuntu driver、ubiquity 跟 update-manager 來安裝 OEM meta

53
00:05:12,180 --> 00:05:14,358
 那什麼是 modaliases？

54
00:05:14,358 --> 00:05:18,541
 modaliases 就是一個 file system，kernel 提供的 file system

55
00:05:18,541 --> 00:05:24,517
那 Arch 的 wiki 上面有蠻清楚的解釋

56
00:05:25,000 --> 00:05:31,603
他其實就是一個 kernel 提供的 system..... 一個 interface

57
00:05:31,603 --> 00:05:38,606
然後你就可以從那邊去得到硬體的一些資訊

58
00:05:38,943 --> 00:05:44,724
那下面這個指令就是說你可以直接找到那些檔案

59
00:05:44,724 --> 00:05:49,804
然後就可以直接把檔案內容，把他讀出來

60
00:05:49,804 --> 00:05:54,762
你就知道 modaliases 長得怎麼樣子

61
00:05:54,762 --> 00:05:59,000
 下面這邊有提供一個比較實際的例子

62
00:05:59,255 --> 00:06:07,543
Ubuntu driver 是用來安裝一些額外的硬體所需要的驅動程式

63
00:06:08,178 --> 00:06:10,512
像這邊就是 ubuntu-drivers list

64
00:06:10,512 --> 00:06:20,877
 他就會列出說，欸我這邊有可以提供 Nvidia driver 460 跟 Nvidia driver 470

65
00:06:20,877 --> 00:06:26,000
那我們可以再利用：ubuntu-drivers devices 這個指令來看

66
00:06:26,000 --> 00:06:29,470
哦 原來他是 match 到這個檔案

67
00:06:29,789 --> 00:06:36,235
那這個路徑底下的那個 modaliases，他的內容就是這樣子

68
00:06:37,000 --> 00:06:40,313
然後就是說，他下面提供的

69
00:06:40,313 --> 00:06:48,600
像這個情況就是，目前是用 built-in 的 open source 的 graphic driver

70
00:06:48,600 --> 00:07:00,266
 那他這邊是建議我們可以使用 Nvidia driver 470 來驅動這個 GPU

71
00:07:01,000 --> 00:07:10,615
那就是，硬體上面會有這種 modaliases

72
00:07:10,615 --> 00:07:19,760
那我們就可以利用 modaliases 的內容來去 match 到我們想要的硬體

73
00:07:20,235 --> 00:07:24,253
 那實際上使用起來的話

74
00:07:24,611 --> 00:07:32,076
 你如果在軟體更新的時候，他其實會跳出一個叫做 Improved Hardware Support

75
00:07:32,076 --> 00:07:42,658
像這邊就是因為他是 Dell Latitude 的這幾個型號，然後他就會出現在更新的清單上面

76
00:07:42,658 --> 00:07:47,762
你如果不想要就把他取消打勾就好

77
00:07:48,003 --> 00:07:51,003
整個使用者體驗就會是這樣子

78
00:07:51,590 --> 00:07:56,000
這就是 OEM metapackage

79
00:07:57,000 --> 00:08:02,663
好，那接下來講一下什麼是 Concourse CI?

80
00:08:03,000 --> 00:08:13,402
 Concourse CI 他是一個 open source 主要在做執行的一個工具

81
00:08:13,402 --> 00:08:20,407
  那他其實有時候會有點類似 crontab、cron job 這樣的工具

82
00:08:20,407 --> 00:08:33,595
但是他是比較更....怎麼講，更豐富、然後有更多可以設定、跟使用的方便性

83
00:08:34,274 --> 00:08:39,135
那他主要是透過裡面的 resources、tasks、跟 jobs

84
00:08:39,135 --> 00:08:45,184
這幾個組成的成分來把整個 pipeline建出來

85
00:08:47,238 --> 00:08:50,000
 他的那個實際上使用

86
00:08:50,000 --> 00:08:59,000
像這個就是 Concourse CI 他本身的框框，他提供的 CI 給大家看

87
00:08:59,000 --> 00:09:00,000
他這邊就會運作

88
00:09:00,000 --> 00:09:02,789
他使用上就會像這樣子

89
00:09:02,789 --> 00:09:04,388
這邊會有個 resource

90
00:09:04,388 --> 00:09:07,786
然後 job 就是這個綠色的部分

91
00:09:07,786 --> 00:09:13,862
那他這邊就是每 30 秒會去驅動一次這個 job，大家可以看到

92
00:09:19,000 --> 00:09:21,765
他就每 30 秒會被驅動一次

93
00:09:21,765 --> 00:09:23,355
那他怎麼辦到的呢？

94
00:09:23,355 --> 00:09:29,057
他就是每 30 秒，這個 resource 會有一些改變

95
00:09:32,000 --> 00:09:34,804
每 30 秒，就會有一些改變

96
00:09:34,804 --> 00:09:40,389
 那這個改變，就會去驅動那個 job

97
00:09:42,000 --> 00:09:45,000
 這就是他整個使用的概念

98
00:09:45,000 --> 00:09:55,462
那呃....我們可以用一些 resource 的不同組合

99
00:09:56,000 --> 00:10:02,454
可以組出一些非常複雜，但是有符合我們需求的 pipeline 出來

100
00:10:02,454 --> 00:10:04,626
我們繼續往下看

101
00:10:05,533 --> 00:10:15,000
 另外一點要特別提到的是，他其實是會有相當陡峭的學習曲線 

102
00:10:15,000 --> 00:10:17,647
 那為什麼他官方會這樣講？ 

103
00:10:17,647 --> 00:10:30,000
 是因為他裡面其實會有蠻多 linux 的一些觀念你都要會

104
00:10:30,000 --> 00:10:36,937
像什麼 pipeline 啊，就是 command line 的 pipeline，然後那些重導

105
00:10:36,981 --> 00:10:46,428
還有一些比較 linux 這邊運作的一些機制，你要非常的熟悉

106
00:10:46,428 --> 00:10:59,381
 那你要先熟悉這些 background knowlege，才有辦法把這一套 CI 學起來

107
00:11:01,000 --> 00:11:04,000
好，那這邊有一些筆記

108
00:11:04,000 --> 00:11:16,595
目前 Concourse CI 他所有的 resources、jobs 全部都是利用 Docker container 組成、製作出來的

109
00:11:16,595 --> 00:11:20,000
  然後他目前也只支援 AMD 64

110
00:11:20,000 --> 00:11:23,196
也就是所謂 x86_64 的架構

111
00:11:23,196 --> 00:11:30,355
然後他的 pipeline 其實沒有支援 if/else 的分支，他就是一路走到底

112
00:11:30,355 --> 00:11:35,940
 他不是對，就是錯 ，不是 fail，就是 success

113
00:11:37,057 --> 00:11:42,916
然後你必須要熟悉 YAML 跟 JSON 的語法

114
00:11:46,000 --> 00:11:57,460
那在 it 邦幫忙這邊， 蒼時弦也有一些入門的教學

115
00:11:57,460 --> 00:12:08,817
 大家可以大概先畫幾個重點出來：Concourse 是由 Cloud Foundry 他們所開發的

116
00:12:09,000 --> 00:12:16,465
就是現有的 CI/CD 工具都沒辦法解決，所以他們才去開發這套 CI/CD 工具

117
00:12:17,141 --> 00:12:23,548
 那剛剛前面也有提到，就是他全部都是在畫 pipeline

118
00:12:23,548 --> 00:12:30,895
用 pipeline 的一些 resource 來驅動 job 去工作

119
00:12:32,352 --> 00:12:41,736
然後 Concourse CI 跟其他 CI/CD 的工具來比的話

120
00:12:41,736 --> 00:12:45,687
就是他沒有 plugin 的概念

121
00:12:45,687 --> 00:12:51,546
他所有的那個擴充性，都是透過 resource 來做的

122
00:12:51,546 --> 00:12:53,864
那等一下會再提到

123
00:12:54,569 --> 00:13:01,000
那像我自己本身就是做了這些 resource type 出來

124
00:13:01,000 --> 00:13:13,242
像一開始使用的時候，發現我可能會需要把 CI 裡面的一些東西，把他存到某個地方去

125
00:13:13,242 --> 00:13:19,668
因為 Concourse CI 他本身並沒有提供一個內建可以 export 檔案的工具 

126
00:13:19,668 --> 00:13:26,828
它只有提供 一些介面跟一些基礎的 resource

127
00:13:26,828 --> 00:13:33,470
那他 built-in 的 resource 並沒有提供 storage 方面的 resource

128
00:13:33,470 --> 00:13:39,392
啊 所以我就去做了 samba 的 resource 跟 webdav 的 resource

129
00:13:39,392 --> 00:13:50,582
那另外是，接下來這些像 dput 就是我會需要把 JPEG dput 到 ppa 上面

130
00:13:50,582 --> 00:13:58,726
那因為這樣的動作其實蠻常在做的，然後一直重複性 

131
00:13:58,726 --> 00:14:05,838
所以我就乾脆弄一個 dput resource 來讓我能夠簡化這樣的工作

132
00:14:05,838 --> 00:14:11,329
那另外也有一個簡單的 autopkgtest resource

133
00:14:14,710 --> 00:14:25,000
那另外就是，我們經常會需要去監測 Debian package version 的版本

134
00:14:25,000 --> 00:14:31,196
譬如說 kernel 有新的 release，或是 GRUB 有新的 release

135
00:14:31,196 --> 00:14:41,284
會希望能在第一時間，當它偵測到某個 package 的版本有所變化的時候

136
00:14:41,284 --> 00:14:45,000
馬上去做一些事情

137
00:14:45,000 --> 00:14:55,833
 所以，因為這樣的需求，所以我也寫了一個 Debian package version 變化偵測的 resource

138
00:14:55,833 --> 00:15:00,477
那另外就是，我自己也寫了一個 mattermost notification

139
00:15:00,477 --> 00:15:03,712
因為 Canonical 有在使用 mattermost 

140
00:15:03,712 --> 00:15:12,880
所以就會利用 mattermost notification 把一些訊息傳到 mattermost channel 上面

141
00:15:12,880 --> 00:15:18,389
那另外是，會去偵測 launchpad bug 的一些變化

142
00:15:18,389 --> 00:15:27,681
然後也是一樣，當那個 launchpad 可能某些 bug 有些變化的話，也會驅動一些工作

143
00:15:28,201 --> 00:15:32,611
那另外是，因為我們也有用到一些 Jenkins 的東西

144
00:15:32,611 --> 00:15:42,597
所以會需要去監測 Jenkins 上的某些 job 是否有被驅動

145
00:15:42,597 --> 00:15:50,000
然後如果他有成功的做完事情，那我們就可以接下來做其他事情

146
00:15:50,000 --> 00:15:52,120
那另外是 rclone 的 resource

147
00:15:52,120 --> 00:16:03,509
rclone 是一個比較通用型的檔案複製跟 sync 的工具

148
00:16:03,509 --> 00:16:09,000
然後因為有一些需求，所以做了 rclone 的 resource

149
00:16:12,789 --> 00:16:17,943
好，那這邊來介紹一下就是.....WebDAV 的 resource

150
00:16:17,943 --> 00:16:20,916
 就是上面這邊有提到的 WebDAV 的 resource

151
00:16:20,916 --> 00:16:25,000
那他使用起來就是像這樣的感覺

152
00:16:28,379 --> 00:16:35,647
 就是我會去監測一個 WebDAV 上面的檔案

153
00:16:35,647 --> 00:16:40,629
 然後我也會去把 Ubuntu Focal 的 docker image 抓回來

154
00:16:40,629 --> 00:16:44,099
那等一下在 check-demo-message 的 job 可以使用

155
00:16:44,099 --> 00:16:50,410
那當這個 demo strorage 裡面的檔案有變化的話

156
00:16:50,410 --> 00:16:55,212
 他就會去驅動這個 demo message 的 job

157
00:16:55,961 --> 00:16:59,744
 那這個就是他 pipeline 的內容

158
00:17:05,000 --> 00:17:09,370
首先就是，我先定義一下 resource type

159
00:17:09,370 --> 00:17:15,235
然後他的名稱是 WebDAV，type 是 registry-image

160
00:17:15,235 --> 00:17:23,000
然後他的 source 是我預先先放在 github registry 上面的 Webdav resource

161
00:17:23,000 --> 00:17:25,590
然後我這邊給他一些 default 值

162
00:17:25,590 --> 00:17:28,494
像我 domain 是 webdav

163
00:17:28,494 --> 00:17:34,235
然後 username、password 也是 webdav，然後我沒有用 HTTPS

164
00:17:35,000 --> 00:17:41,235
然後，接下來我就可以在 resource 裡面使用這個 webdav 的 type

165
00:17:41,235 --> 00:17:46,350
然後他的名稱叫 demo storage，也給他一個 icon

166
00:17:46,350 --> 00:17:50,606
這就是 Material design 的 icon

167
00:17:50,606 --> 00:17:56,525
然後我要他去監測 demo 這個目錄底下的變化

168
00:17:58,157 --> 00:18:03,820
然後接下來是 ubuntu focal 的 docker image

169
00:18:04,412 --> 00:18:07,687
那這就是 resource 這邊的定義

170
00:18:07,687 --> 00:18:10,569
那我這邊再定義一下 job

171
00:18:10,569 --> 00:18:13,843
我這邊只有一個 job 叫 check-demo-message

172
00:18:13,843 --> 00:18:21,738
然後他的 plan  就是我要去抓這個 ubuntu focal 回來

173
00:18:21,738 --> 00:18:29,000
然後我再去抓那個 demo storage，如果有變化的話就把他 trigger

174
00:18:29,000 --> 00:18:31,334
那所以這邊會有一個 trigger 等於 true

175
00:18:31,334 --> 00:18:36,410
就是說，當這個 demo storage 的 resource 他有任何的變化的話，

176
00:18:36,410 --> 00:18:41,193
他會自動的去 trigger 整個 job 去做事情

177
00:18:41,193 --> 00:18:45,000
那真的做事情是在這邊，就是這個 task

178
00:18:45,000 --> 00:18:47,435
然後 task 這邊可以指定說

179
00:18:47,435 --> 00:18:55,856
我要使用 ubuntu focal 的 docker image 當我的工作環境

180
00:18:56,433 --> 00:19:03,350
然後你就可以設定說 platform 是 linux

181
00:19:03,350 --> 00:19:13,908
然後 input 就是，我要把這個 demo storage 抓到的東西，直接抓進來使用

182
00:19:13,908 --> 00:19:20,000
那你下這個 input，這邊是一個 array，然後直接給他名稱

183
00:19:20,000 --> 00:19:26,486
那接下來就是，在 run 這邊就可以直接使用 command

184
00:19:26,486 --> 00:19:29,744
path 就是 command 的名稱

185
00:19:29,744 --> 00:19:37,248
你就可以直接 cat，然後給他一個參數，就是 demo storage message

186
00:19:40,000 --> 00:19:46,877
好，那他執行起來會長像這樣，那我們來 live demo 一下

187
00:20:00,000 --> 00:20:08,640
 我這邊有準備一個等一下後面會講到的 OEM metapackage 的 repo

188
00:20:08,640 --> 00:20:12,219
 然後 git 的 repository

189
00:20:12,219 --> 00:20:24,386
然後可以按照裡面的說明，就可以把這個 Concourse CI 建構起來

190
00:20:24,386 --> 00:20:30,465
利用 docker-compose 把他建構起來

191
00:20:34,587 --> 00:20:37,587
 好，先登入

192
00:20:38,000 --> 00:20:46,209
登錄完之後呢，  我就可以用.....

193
00:20:57,003 --> 00:21:13,465
然後呢，我就可以用 webdav demo pipeplines

194
00:21:33,000 --> 00:21:38,820
 然後就可以開啟連結

195
00:21:49,636 --> 00:21:50,894
好，這邊要等他一下

196
00:21:50,894 --> 00:21:55,702
他第一次被建立起來

197
00:21:55,702 --> 00:22:03,401
所以需要一點時間去抓第一次使用的 resource 的 image

198
00:22:04,000 --> 00:22:07,000
當然之後就可以重複使用

199
00:22:07,000 --> 00:22:13,000
他抓完了 webdav 的 resource

200
00:22:13,000 --> 00:22:19,681
這邊有檢查到，這邊有一個 message

201
00:22:23,000 --> 00:22:32,334
好，那他的內容就是把一個 message log 抓下來

202
00:22:32,334 --> 00:22:36,000
然後把他的內容印出來

203
00:22:36,671 --> 00:22:37,798
大概就是這樣子

204
00:22:38,777 --> 00:22:43,076
那因為我這邊是直接放在這個 repo 裡面

205
00:22:45,000 --> 00:22:46,903
那我們也可以啊 

206
00:22:46,903 --> 00:22:53,702
比如說，我現在錄這個影片的時間是這個時候

207
00:22:53,702 --> 00:22:56,702
那可以把東西再傳進去

208
00:23:00,344 --> 00:23:04,761
後面會多了一個 timestamp 出來

209
00:23:17,000 --> 00:23:31,000
好，他要檢查到一個新的版本，然後他這個 job 就會被自動執行起來

210
00:23:31,000 --> 00:23:36,726
你看這邊就有一個 timestamp 我剛剛加上去的

211
00:23:36,726 --> 00:23:44,308
 好，那這個就是大概的一個 demo

212
00:23:49,587 --> 00:23:50,629
好

213
00:23:50,629 --> 00:24:01,765
那我們是怎麼使用 Concourse CI 在 OEM metapackages 上面呢？

214
00:24:01,765 --> 00:24:05,352
首先要解釋一下，就是 Canonical 的員工

215
00:24:05,352 --> 00:24:08,307
他會去維護 OEM metapackage

216
00:24:08,307 --> 00:24:16,000
在這三個 git repository 裡面，不同的 branch 底下

217
00:24:16,000 --> 00:24:21,232
然後我會去維護這個 CI/CD pipeline

218
00:24:21,232 --> 00:24:25,720
在這個 launchpad git repository 上面

219
00:24:26,000 --> 00:24:29,000
呃，然後他會....

220
00:24:34,639 --> 00:24:38,832
像這邊，他檔名就會像這樣子

221
00:24:40,000 --> 00:24:41,903
會有很多的 branch

222
00:24:41,903 --> 00:24:49,133
那每個 branch 就是一個不一樣的平台

223
00:24:52,587 --> 00:25:01,775
然後我維護的 meta CI 就是在這邊

224
00:25:03,000 --> 00:25:06,868
所以這比較簡單，他只有一個 branch

225
00:25:09,509 --> 00:25:18,736
另外是，我有維護一個 dashboard，他的長相大概是這樣

226
00:25:20,000 --> 00:25:27,190
這個，等一下有時間可以再回來解釋一下這個 dashboard

227
00:25:29,000 --> 00:25:40,624
好，那實際上 Concourse CI 執行起來會像這樣

228
00:25:42,000 --> 00:25:49,426
他會有很多 job，然後都是由 git 的 branch 去驅動

229
00:25:49,426 --> 00:25:55,000
然後他做完事情，他會透過 mattermost

230
00:25:55,000 --> 00:26:03,404
如果失敗的話，會透過 mattermost 去傳遞一些訊息到 mattermost channel

231
00:26:07,000 --> 00:26:12,702
那剛剛提到的 dashboard 長得像這樣

232
00:26:12,702 --> 00:26:24,671
其實這邊，像這個 autopkg boostrap build pass、real build pass

233
00:26:24,671 --> 00:26:29,780
他其實就是對應到這裡的某一個 job

234
00:26:29,780 --> 00:26:36,931
 像這個 modaliases build pass，他就會對應到這個 modaliases

235
00:26:38,000 --> 00:26:44,799
那這裡有 boostrap 的 install 會在這邊，最下面這裡

236
00:26:46,000 --> 00:26:49,000
kernel flavour 會在這裡

237
00:26:49,467 --> 00:26:53,000
然後 market name 會在這裡

238
00:26:54,000 --> 00:26:57,000
大概是醬

239
00:27:00,000 --> 00:27:08,298
好，那基本上就是....

240
00:27:08,298 --> 00:27:27,000
我有另外準備一個 pipeline 的 job，去定時檢查這三個 git repository

241
00:27:27,000 --> 00:27:32,311
啊如果他有任何的新的 branch 的話

242
00:27:34,000 --> 00:27:42,000
或者他刪掉 branch ，都會去更新我自己維護的這個 meta ci

243
00:27:42,000 --> 00:27:45,000
自動去更新

244
00:27:45,548 --> 00:27:56,655
 然後我所需要做的事情其實就是去改變這兩個 template

245
00:27:56,655 --> 00:28:02,856
然後增加一些更多的測試

246
00:28:06,000 --> 00:28:11,546
 那我們來實際的 live demo 一下

247
00:28:24,000 --> 00:28:35,067
參考 readme，這邊提到可以直接設定一個 reconfigure 的 ci

248
00:28:36,000 --> 00:28:49,000
然後他就會自動去 watch 這個 meta ci 的 repository

249
00:28:49,000 --> 00:28:59,765
然後當他有任何的變化的時候，他會再自動去把個別的 CI 建立起來

250
00:28:59,765 --> 00:29:04,635
那我們可以把他 unpalse 一下，他就開始運作了

251
00:30:09,000 --> 00:30:13,756
這邊應該改善一下，不要讓他同時跑五個 job

252
00:30:13,756 --> 00:30:16,298
應該讓他輪流，一個一個跑 

253
00:30:16,298 --> 00:30:27,091
要不然他一次同時跑會讓 resource 搶來搶去，反而讓執行變慢

254
00:31:05,000 --> 00:31:08,000
全部好了！

255
00:31:08,000 --> 00:31:12,136
好，那大概看起來就像這樣

256
00:31:21,984 --> 00:31:27,551
那為什麼這邊會看到整個黑黑的

257
00:31:27,551 --> 00:31:31,178
是因為它裡面的 job 太多了

258
00:31:31,178 --> 00:31:35,509
所以就沒有辦法顯示（笑～

259
00:31:35,804 --> 00:31:38,491
不過可以點進去看

260
00:31:38,491 --> 00:31:48,256
像在簡報裡面提到的這個 vary，v 開頭的

261
00:31:48,256 --> 00:31:52,196
那這解決他不會自動去檢查

262
00:31:52,196 --> 00:31:56,767
我是透過 Concourse CI 他提供的 webhook

263
00:31:56,767 --> 00:32:06,000
另外寫一個小程式去接那個 function 配的 webhook

264
00:32:06,000 --> 00:32:09,666
這邊傳進來，然後再去驅動這邊

265
00:32:09,666 --> 00:32:20,308
這邊如果要使用的話，就是手動的去 trigger 就好

266
00:32:33,569 --> 00:32:40,000
他就是，檢查之後就是長得像這樣 

267
00:32:40,000 --> 00:32:49,305
然後就會開始做這些事先定義好的一些測試

268
00:32:53,940 --> 00:32:55,537
那這大概就是

269
00:32:55,537 --> 00:33:07,592
我們怎麼樣使用 Concourse CI 在 OEM metapackages 上面

270
00:33:30,807 --> 00:33:40,781
喔因為我做 demo 的這臺電腦，其實是是蠻....

271
00:33:40,781 --> 00:33:45,425
資源是沒有那麼 powerful

272
00:33:47,000 --> 00:33:52,548
所以會，執行比較慢 

273
00:33:52,548 --> 00:33:55,650
 如果把他全部都列出來的話 

274
00:33:55,650 --> 00:34:01,000
 他會因為 job 太多就會變得很長

275
00:34:03,105 --> 00:34:08,455
所以才用字母來排序

276
00:34:08,455 --> 00:34:12,669
 反應會快一點 

277
00:34:22,000 --> 00:34:30,600
 另外是....這個先讓他跑一下

278
00:34:37,433 --> 00:34:42,196
 像....接下來就來示範一下

279
00:34:42,196 --> 00:34:48,172
譬如說你看現在這邊已經有這些測試的 job

280
00:34:48,172 --> 00:34:55,251
那我現在來新增一個新的測試的 job

281
00:34:58,000 --> 00:35:04,665
我就只需要直接去修改一個叫做 project template 的 yaml

282
00:35:04,665 --> 00:35:07,000
然後我們看....

283
00:35:09,000 --> 00:35:13,253
隨便做一個檢查之類的

284
00:35:44,000 --> 00:35:52,444
不然我來做一個 job 去把 modaliases 印出來好了

285
00:35:55,000 --> 00:35:58,313
那直接複製這邊現有的

286
00:36:52,000 --> 00:37:02,115
 然後這邊會 get Ubuntu request、get OEM

287
00:37:05,000 --> 00:37:09,527
這是 check，要把它改成 print 

288
00:37:26,871 --> 00:37:32,636
然後 check modaliases

289
00:37:32,636 --> 00:37:38,000
 我就把他隨便複製

290
00:38:15,000 --> 00:38:23,796
好，然後這裡你就改成.....

291
00:38:46,000 --> 00:38:52,838
 好，我這邊就直接加了一個新的測試

292
00:38:52,838 --> 00:38:55,334
叫做 print-modaliases 

293
00:38:55,334 --> 00:38:58,060
就是直接把它印出來

294
00:38:58,060 --> 00:39:00,988
把 modaliases string 印出來

295
00:39:09,000 --> 00:39:14,859
他這邊會去把 Ubuntu 

296
00:39:14,859 --> 00:39:23,018
這個 platform 的 Ubuntu branch，input 到 Ubuntu 的這個 path

297
00:39:23,018 --> 00:39:27,036
那這邊是 OEM 的 branch 

298
00:39:27,036 --> 00:39:32,000
會 input 到 OEM 的 folder 底下

299
00:39:32,000 --> 00:39:38,705
然後在 print-modaliases 這邊就可以直接把他 cat 出來

300
00:39:44,000 --> 00:39:47,000
應該就可以了 

301
00:39:47,901 --> 00:39:49,594
加了這個

302
00:39:52,000 --> 00:39:57,057
 然後定義了一個 function

303
00:39:57,057 --> 00:40:00,723
就是這個 ytt，等一下可以再解釋一下

304
00:40:03,000 --> 00:40:10,000
然後直接就寫了一個新的 job

305
00:40:12,000 --> 00:40:15,000
內容大概是這樣

306
00:40:15,687 --> 00:40:20,000
 然後我就可以用 generate

307
00:40:20,000 --> 00:40:22,256
generate 是什麼？

308
00:40:22,256 --> 00:40:26,000
 generate 他會去讀 template

309
00:40:26,000 --> 00:40:33,700
然後幫這個 somerville stella sutton 這三個專案都把它轉出來

310
00:40:33,700 --> 00:40:48,500
然後再利用 ytt 這個工具去把他產生最後的 platform 的 YAML 檔案

311
00:40:54,000 --> 00:41:00,799
就是產生 somerville.yaml stella.yaml 跟 sutton.yaml

312
00:41:03,000 --> 00:41:05,708
執行一下～

313
00:41:05,708 --> 00:41:10,588
 然後我就直接透過 command 的方式

314
00:41:10,588 --> 00:41:21,459
把剛剛 gen 出來的 somerville.....

315
00:41:38,000 --> 00:41:43,941
mattermost 的 hook 也要給他一下

316
00:42:25,000 --> 00:42:33,718
可能是 ytt 這邊沒有支援

317
00:42:48,008 --> 00:42:51,253
好，沒錯

318
00:43:02,397 --> 00:43:09,000
咦？！不然我們把 group 加上去

319
00:43:09,000 --> 00:43:10,782
再改一下

320
00:43:43,000 --> 00:43:44,303
好

321
00:43:44,303 --> 00:43:54,940
然後可以看到這邊就多了一個 varys-focal-modaliases-print 新的測試的 job

322
00:43:54,940 --> 00:44:00,545
那當然他每一個都會幫我做完，所以我只要改一個地方就好

323
00:44:15,000 --> 00:44:21,603
像這邊就是我剛剛加的 modaliases print

324
00:44:23,000 --> 00:44:26,000
一個新的 job

325
00:44:27,627 --> 00:44:29,217
假設他是另外一個新的

326
00:44:29,217 --> 00:44:38,765
可能需要對 OEM metapackage 做測試的一個新的測試

327
00:44:38,765 --> 00:44:42,000
 那就是可以利用這樣的方式把他加進來

328
00:44:47,000 --> 00:44:47,867
好

329
00:44:47,867 --> 00:44:52,000
那以上就是我的分享

330
00:44:52,000 --> 00:44:55,000
好，謝謝大家～

